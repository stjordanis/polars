Search.setIndex({"docnames": ["index", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_global_string_cache", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_column_separator", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_utf8_tables", "reference/api/polars.Config.unset_global_string_cache", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arccosh", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arcsinh", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arctanh", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.clip_max", "reference/api/polars.Expr.clip_min", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.cosh", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.limit", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.nan_max", "reference/api/polars.Expr.nan_min", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.search_sorted", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.sinh", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.tanh", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.top_k", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arccosh", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arcsinh", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arctanh", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_sort", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.cleared", "reference/api/polars.Series.clip", "reference/api/polars.Series.clip_max", "reference/api/polars.Series.clip_min", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cosh", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.flags", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_empty", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.nan_max", "reference/api/polars.Series.nan_min", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.reverse", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.search_sorted", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.sinh", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.tanh", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.top_k", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.cut", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.datatypes.get_idx_type", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval", "reference/api/polars.internals.expr.list.ExprListNameSpace.first", "reference/api/polars.internals.expr.list.ExprListNameSpace.get", "reference/api/polars.internals.expr.list.ExprListNameSpace.head", "reference/api/polars.internals.expr.list.ExprListNameSpace.join", "reference/api/polars.internals.expr.list.ExprListNameSpace.last", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.list.ExprListNameSpace.max", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean", "reference/api/polars.internals.expr.list.ExprListNameSpace.min", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year", "reference/api/polars.internals.series.list.ListNameSpace.arg_max", "reference/api/polars.internals.series.list.ListNameSpace.arg_min", "reference/api/polars.internals.series.list.ListNameSpace.concat", "reference/api/polars.internals.series.list.ListNameSpace.contains", "reference/api/polars.internals.series.list.ListNameSpace.diff", "reference/api/polars.internals.series.list.ListNameSpace.eval", "reference/api/polars.internals.series.list.ListNameSpace.first", "reference/api/polars.internals.series.list.ListNameSpace.get", "reference/api/polars.internals.series.list.ListNameSpace.head", "reference/api/polars.internals.series.list.ListNameSpace.join", "reference/api/polars.internals.series.list.ListNameSpace.last", "reference/api/polars.internals.series.list.ListNameSpace.lengths", "reference/api/polars.internals.series.list.ListNameSpace.max", "reference/api/polars.internals.series.list.ListNameSpace.mean", "reference/api/polars.internals.series.list.ListNameSpace.min", "reference/api/polars.internals.series.list.ListNameSpace.reverse", "reference/api/polars.internals.series.list.ListNameSpace.shift", "reference/api/polars.internals.series.list.ListNameSpace.slice", "reference/api/polars.internals.series.list.ListNameSpace.sort", "reference/api/polars.internals.series.list.ListNameSpace.sum", "reference/api/polars.internals.series.list.ListNameSpace.tail", "reference/api/polars.internals.series.list.ListNameSpace.unique", "reference/api/polars.internals.series.string.StringNameSpace.concat", "reference/api/polars.internals.series.string.StringNameSpace.contains", "reference/api/polars.internals.series.string.StringNameSpace.count_match", "reference/api/polars.internals.series.string.StringNameSpace.decode", "reference/api/polars.internals.series.string.StringNameSpace.encode", "reference/api/polars.internals.series.string.StringNameSpace.ends_with", "reference/api/polars.internals.series.string.StringNameSpace.extract", "reference/api/polars.internals.series.string.StringNameSpace.extract_all", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match", "reference/api/polars.internals.series.string.StringNameSpace.lengths", "reference/api/polars.internals.series.string.StringNameSpace.ljust", "reference/api/polars.internals.series.string.StringNameSpace.lstrip", "reference/api/polars.internals.series.string.StringNameSpace.replace", "reference/api/polars.internals.series.string.StringNameSpace.replace_all", "reference/api/polars.internals.series.string.StringNameSpace.rjust", "reference/api/polars.internals.series.string.StringNameSpace.rstrip", "reference/api/polars.internals.series.string.StringNameSpace.slice", "reference/api/polars.internals.series.string.StringNameSpace.split", "reference/api/polars.internals.series.string.StringNameSpace.split_exact", "reference/api/polars.internals.series.string.StringNameSpace.splitn", "reference/api/polars.internals.series.string.StringNameSpace.starts_with", "reference/api/polars.internals.series.string.StringNameSpace.strip", "reference/api/polars.internals.series.string.StringNameSpace.strptime", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.string.StringNameSpace.zfill", "reference/api/polars.internals.series.struct.StructNameSpace.field", "reference/api/polars.internals.series.struct.StructNameSpace.fields", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.show_versions", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.column", "reference/api/polars.testing.columns", "reference/api/polars.testing.dataframes", "reference/api/polars.testing.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expression", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_global_string_cache.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_column_separator.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_utf8_tables.rst", "reference/api/polars.Config.unset_global_string_cache.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arccosh.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arcsinh.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arctanh.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.clip_max.rst", "reference/api/polars.Expr.clip_min.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.cosh.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.limit.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.nan_max.rst", "reference/api/polars.Expr.nan_min.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.search_sorted.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.sinh.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.tanh.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.top_k.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arccosh.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arcsinh.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arctanh.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_sort.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.cleared.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clip_max.rst", "reference/api/polars.Series.clip_min.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cosh.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.flags.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_empty.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.nan_max.rst", "reference/api/polars.Series.nan_min.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.reverse.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.search_sorted.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.sinh.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.tanh.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.top_k.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.cut.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.datatypes.get_idx_type.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.list.ListNameSpace.concat.rst", "reference/api/polars.internals.series.list.ListNameSpace.contains.rst", "reference/api/polars.internals.series.list.ListNameSpace.diff.rst", "reference/api/polars.internals.series.list.ListNameSpace.eval.rst", "reference/api/polars.internals.series.list.ListNameSpace.first.rst", "reference/api/polars.internals.series.list.ListNameSpace.get.rst", "reference/api/polars.internals.series.list.ListNameSpace.head.rst", "reference/api/polars.internals.series.list.ListNameSpace.join.rst", "reference/api/polars.internals.series.list.ListNameSpace.last.rst", "reference/api/polars.internals.series.list.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.list.ListNameSpace.max.rst", "reference/api/polars.internals.series.list.ListNameSpace.mean.rst", "reference/api/polars.internals.series.list.ListNameSpace.min.rst", "reference/api/polars.internals.series.list.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.list.ListNameSpace.shift.rst", "reference/api/polars.internals.series.list.ListNameSpace.slice.rst", "reference/api/polars.internals.series.list.ListNameSpace.sort.rst", "reference/api/polars.internals.series.list.ListNameSpace.sum.rst", "reference/api/polars.internals.series.list.ListNameSpace.tail.rst", "reference/api/polars.internals.series.list.ListNameSpace.unique.rst", "reference/api/polars.internals.series.string.StringNameSpace.concat.rst", "reference/api/polars.internals.series.string.StringNameSpace.contains.rst", "reference/api/polars.internals.series.string.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.decode.rst", "reference/api/polars.internals.series.string.StringNameSpace.encode.rst", "reference/api/polars.internals.series.string.StringNameSpace.ends_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.string.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.string.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.string.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.slice.rst", "reference/api/polars.internals.series.string.StringNameSpace.split.rst", "reference/api/polars.internals.series.string.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.string.StringNameSpace.splitn.rst", "reference/api/polars.internals.series.string.StringNameSpace.starts_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.strip.rst", "reference/api/polars.internals.series.string.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.struct.StructNameSpace.field.rst", "reference/api/polars.internals.series.struct.StructNameSpace.fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.column.rst", "reference/api/polars.testing.columns.rst", "reference/api/polars.testing.dataframes.rst", "reference/api/polars.testing.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expression.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_global_string_cache", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_change_column_data_type_position_format", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_column_separator", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_utf8_tables", "polars.Config.unset_global_string_cache", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cut", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.datatypes.get_idx_type", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "polars.internals.expr.list.ExprListNameSpace.arg_max", "polars.internals.expr.list.ExprListNameSpace.arg_min", "polars.internals.expr.list.ExprListNameSpace.concat", "polars.internals.expr.list.ExprListNameSpace.contains", "polars.internals.expr.list.ExprListNameSpace.diff", "polars.internals.expr.list.ExprListNameSpace.eval", "polars.internals.expr.list.ExprListNameSpace.first", "polars.internals.expr.list.ExprListNameSpace.get", "polars.internals.expr.list.ExprListNameSpace.head", "polars.internals.expr.list.ExprListNameSpace.join", "polars.internals.expr.list.ExprListNameSpace.last", "polars.internals.expr.list.ExprListNameSpace.lengths", "polars.internals.expr.list.ExprListNameSpace.max", "polars.internals.expr.list.ExprListNameSpace.mean", "polars.internals.expr.list.ExprListNameSpace.min", "polars.internals.expr.list.ExprListNameSpace.reverse", "polars.internals.expr.list.ExprListNameSpace.shift", "polars.internals.expr.list.ExprListNameSpace.slice", "polars.internals.expr.list.ExprListNameSpace.sort", "polars.internals.expr.list.ExprListNameSpace.sum", "polars.internals.expr.list.ExprListNameSpace.tail", "polars.internals.expr.list.ExprListNameSpace.to_struct", "polars.internals.expr.list.ExprListNameSpace.unique", "polars.internals.expr.meta.ExprMetaNameSpace.output_name", "polars.internals.expr.meta.ExprMetaNameSpace.pop", "polars.internals.expr.meta.ExprMetaNameSpace.root_names", "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "polars.internals.expr.string.ExprStringNameSpace.concat", "polars.internals.expr.string.ExprStringNameSpace.contains", "polars.internals.expr.string.ExprStringNameSpace.count_match", "polars.internals.expr.string.ExprStringNameSpace.decode", "polars.internals.expr.string.ExprStringNameSpace.encode", "polars.internals.expr.string.ExprStringNameSpace.ends_with", "polars.internals.expr.string.ExprStringNameSpace.extract", "polars.internals.expr.string.ExprStringNameSpace.extract_all", "polars.internals.expr.string.ExprStringNameSpace.json_path_match", "polars.internals.expr.string.ExprStringNameSpace.lengths", "polars.internals.expr.string.ExprStringNameSpace.ljust", "polars.internals.expr.string.ExprStringNameSpace.lstrip", "polars.internals.expr.string.ExprStringNameSpace.replace", "polars.internals.expr.string.ExprStringNameSpace.replace_all", "polars.internals.expr.string.ExprStringNameSpace.rjust", "polars.internals.expr.string.ExprStringNameSpace.rstrip", "polars.internals.expr.string.ExprStringNameSpace.slice", "polars.internals.expr.string.ExprStringNameSpace.split", "polars.internals.expr.string.ExprStringNameSpace.split_exact", "polars.internals.expr.string.ExprStringNameSpace.splitn", "polars.internals.expr.string.ExprStringNameSpace.starts_with", "polars.internals.expr.string.ExprStringNameSpace.strip", "polars.internals.expr.string.ExprStringNameSpace.strptime", "polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "polars.internals.expr.string.ExprStringNameSpace.zfill", "polars.internals.expr.struct.ExprStructNameSpace.field", "polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.internals.series.categorical.CatNameSpace.set_ordering", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.day", "polars.internals.series.datetime.DateTimeNameSpace.days", "polars.internals.series.datetime.DateTimeNameSpace.epoch", "polars.internals.series.datetime.DateTimeNameSpace.hour", "polars.internals.series.datetime.DateTimeNameSpace.hours", "polars.internals.series.datetime.DateTimeNameSpace.iso_year", "polars.internals.series.datetime.DateTimeNameSpace.max", "polars.internals.series.datetime.DateTimeNameSpace.mean", "polars.internals.series.datetime.DateTimeNameSpace.median", "polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "polars.internals.series.datetime.DateTimeNameSpace.min", "polars.internals.series.datetime.DateTimeNameSpace.minute", "polars.internals.series.datetime.DateTimeNameSpace.minutes", "polars.internals.series.datetime.DateTimeNameSpace.month", "polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "polars.internals.series.datetime.DateTimeNameSpace.offset_by", "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "polars.internals.series.datetime.DateTimeNameSpace.quarter", "polars.internals.series.datetime.DateTimeNameSpace.second", "polars.internals.series.datetime.DateTimeNameSpace.seconds", "polars.internals.series.datetime.DateTimeNameSpace.strftime", "polars.internals.series.datetime.DateTimeNameSpace.timestamp", "polars.internals.series.datetime.DateTimeNameSpace.truncate", "polars.internals.series.datetime.DateTimeNameSpace.week", "polars.internals.series.datetime.DateTimeNameSpace.weekday", "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.year", "polars.internals.series.list.ListNameSpace.arg_max", "polars.internals.series.list.ListNameSpace.arg_min", "polars.internals.series.list.ListNameSpace.concat", "polars.internals.series.list.ListNameSpace.contains", "polars.internals.series.list.ListNameSpace.diff", "polars.internals.series.list.ListNameSpace.eval", "polars.internals.series.list.ListNameSpace.first", "polars.internals.series.list.ListNameSpace.get", "polars.internals.series.list.ListNameSpace.head", "polars.internals.series.list.ListNameSpace.join", "polars.internals.series.list.ListNameSpace.last", "polars.internals.series.list.ListNameSpace.lengths", "polars.internals.series.list.ListNameSpace.max", "polars.internals.series.list.ListNameSpace.mean", "polars.internals.series.list.ListNameSpace.min", "polars.internals.series.list.ListNameSpace.reverse", "polars.internals.series.list.ListNameSpace.shift", "polars.internals.series.list.ListNameSpace.slice", "polars.internals.series.list.ListNameSpace.sort", "polars.internals.series.list.ListNameSpace.sum", "polars.internals.series.list.ListNameSpace.tail", "polars.internals.series.list.ListNameSpace.unique", "polars.internals.series.string.StringNameSpace.concat", "polars.internals.series.string.StringNameSpace.contains", "polars.internals.series.string.StringNameSpace.count_match", "polars.internals.series.string.StringNameSpace.decode", "polars.internals.series.string.StringNameSpace.encode", "polars.internals.series.string.StringNameSpace.ends_with", "polars.internals.series.string.StringNameSpace.extract", "polars.internals.series.string.StringNameSpace.extract_all", "polars.internals.series.string.StringNameSpace.json_path_match", "polars.internals.series.string.StringNameSpace.lengths", "polars.internals.series.string.StringNameSpace.ljust", "polars.internals.series.string.StringNameSpace.lstrip", "polars.internals.series.string.StringNameSpace.replace", "polars.internals.series.string.StringNameSpace.replace_all", "polars.internals.series.string.StringNameSpace.rjust", "polars.internals.series.string.StringNameSpace.rstrip", "polars.internals.series.string.StringNameSpace.slice", "polars.internals.series.string.StringNameSpace.split", "polars.internals.series.string.StringNameSpace.split_exact", "polars.internals.series.string.StringNameSpace.splitn", "polars.internals.series.string.StringNameSpace.starts_with", "polars.internals.series.string.StringNameSpace.strip", "polars.internals.series.string.StringNameSpace.strptime", "polars.internals.series.string.StringNameSpace.to_lowercase", "polars.internals.series.string.StringNameSpace.to_uppercase", "polars.internals.series.string.StringNameSpace.zfill", "polars.internals.series.struct.StructNameSpace.field", "polars.internals.series.struct.StructNameSpace.fields", "polars.internals.series.struct.StructNameSpace.rename_fields", "polars.internals.series.struct.StructNameSpace.to_frame", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.select", "polars.show_versions", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.column", "polars.testing.columns", "polars.testing.dataframes", "polars.testing.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "Config", "DataFrame", "Data Types", "Exceptions", "Expressions", "Functions", "API reference", "Input/output", "LazyFrame", "Series", "Testing", "Utils"], "terms": {"api": [0, 17, 117, 539, 541, 645, 752, 774], "refer": [0, 101, 208, 412, 638, 722, 741, 742], "input": [0, 189, 395, 473, 527, 613, 619, 703, 732, 733, 736, 741, 742, 779], "output": [0, 17, 38, 39, 60, 62, 97, 105, 107, 108, 113, 117, 191, 192, 253, 274, 275, 283, 313, 320, 466, 473, 511, 612, 645, 732, 742, 765, 779], "function": [0, 17, 26, 33, 56, 61, 62, 93, 96, 114, 117, 145, 152, 153, 154, 191, 192, 202, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 248, 283, 287, 289, 320, 349, 358, 359, 360, 361, 418, 438, 443, 471, 473, 475, 485, 527, 528, 541, 551, 610, 645, 673, 732, 741, 742, 751, 766, 779], "seri": [0, 16, 17, 23, 31, 33, 35, 36, 40, 43, 44, 46, 48, 53, 54, 57, 67, 68, 74, 82, 86, 91, 92, 101, 102, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 133, 137, 138, 157, 158, 163, 164, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 190, 191, 204, 208, 209, 210, 211, 212, 214, 227, 232, 233, 244, 245, 246, 247, 252, 270, 296, 309, 310, 470, 473, 474, 475, 477, 478, 480, 481, 482, 483, 485, 511, 527, 528, 530, 531, 534, 538, 540, 563, 564, 566, 569, 571, 573, 576, 581, 584, 587, 589, 590, 591, 593, 597, 598, 605, 606, 609, 610, 616, 632, 638, 642, 731, 732, 733, 734, 735, 736, 737, 750, 756, 759, 760, 761, 762, 764, 765, 771, 779], "datafram": [0, 6, 11, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 314, 319, 350, 457, 458, 466, 470, 471, 474, 475, 478, 479, 480, 481, 482, 485, 513, 514, 526, 529, 530, 531, 532, 533, 534, 535, 536, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 683, 706, 708, 718, 719, 729, 740, 741, 742, 743, 745, 746, 747, 749, 751, 753, 754, 755, 756, 760, 761, 763, 765, 766, 772, 777, 779], "lazyfram": [0, 16, 51, 161, 479, 480, 751, 752, 753, 754, 755, 763, 767, 779], "express": [0, 17, 29, 31, 37, 62, 70, 80, 102, 110, 113, 114, 116, 117, 134, 135, 136, 139, 145, 147, 155, 161, 168, 170, 174, 177, 182, 185, 190, 191, 192, 204, 205, 206, 211, 225, 226, 227, 229, 235, 241, 244, 250, 252, 255, 259, 267, 270, 290, 298, 299, 301, 309, 310, 311, 339, 340, 341, 349, 430, 437, 474, 475, 478, 479, 484, 514, 526, 527, 528, 529, 539, 541, 577, 594, 612, 613, 624, 638, 644, 645, 666, 683, 708, 731, 732, 738, 750, 756, 758, 760, 761, 765, 767, 768, 772, 779], "data": [0, 5, 8, 16, 18, 19, 28, 49, 51, 61, 65, 71, 72, 78, 85, 89, 90, 131, 169, 208, 224, 225, 234, 248, 250, 257, 258, 267, 289, 314, 319, 334, 338, 342, 354, 356, 412, 428, 429, 438, 443, 459, 460, 462, 464, 468, 470, 480, 488, 518, 523, 524, 530, 531, 532, 533, 534, 535, 564, 580, 587, 644, 649, 676, 741, 742, 743, 744, 748, 749, 751, 763, 764, 766, 767, 768, 779], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 27, 33, 38, 39, 40, 54, 73, 85, 89, 90, 92, 94, 95, 117, 131, 134, 135, 136, 155, 166, 170, 172, 174, 175, 191, 211, 248, 259, 265, 267, 274, 275, 283, 290, 295, 299, 306, 307, 314, 320, 334, 339, 340, 341, 356, 371, 373, 438, 458, 459, 460, 462, 469, 473, 478, 479, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 526, 527, 530, 532, 535, 563, 566, 569, 571, 573, 576, 581, 598, 610, 633, 634, 635, 638, 645, 648, 651, 654, 659, 662, 665, 670, 687, 717, 718, 719, 722, 731, 732, 741, 742, 744, 748, 751, 757, 763, 764, 765, 766, 767, 768, 770, 779], "config": [0, 102, 310, 779], "except": [0, 50, 280, 460, 779], "test": [0, 276, 282, 742, 779], "util": [0, 267, 779], "classmethod": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 272, 292], "cfg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 781], "us": [1, 2, 6, 12, 13, 14, 16, 17, 29, 30, 33, 38, 39, 50, 54, 56, 58, 62, 70, 72, 80, 82, 93, 94, 97, 105, 109, 110, 112, 117, 145, 148, 149, 151, 152, 153, 154, 155, 160, 161, 169, 183, 191, 195, 208, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227, 230, 234, 236, 237, 259, 268, 269, 273, 274, 275, 276, 280, 282, 287, 301, 306, 309, 314, 320, 349, 357, 359, 360, 361, 366, 370, 391, 412, 414, 416, 429, 432, 433, 434, 443, 447, 451, 459, 460, 467, 468, 470, 473, 474, 476, 478, 480, 482, 509, 511, 531, 533, 535, 539, 541, 551, 563, 587, 594, 610, 619, 620, 621, 626, 630, 632, 634, 636, 638, 645, 648, 676, 683, 703, 704, 710, 714, 716, 718, 722, 731, 733, 736, 741, 742, 743, 747, 749, 750, 751, 752, 753, 754, 755, 761, 765, 766, 767, 768, 777], "ascii": [1, 626, 630, 641, 710, 714, 725], "charact": [1, 2, 13, 14, 105, 163, 577, 626, 630, 633, 634, 641, 666, 710, 714, 717, 718, 725, 741, 751], "print": [1, 2, 6, 12, 14, 25, 37, 51, 168, 277, 382, 418, 757], "tabl": [1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 62, 85, 90, 96, 530, 551, 741, 751], "n": [2, 6, 12, 17, 28, 38, 41, 52, 60, 72, 83, 84, 90, 145, 146, 158, 167, 186, 203, 211, 225, 234, 243, 245, 249, 259, 276, 282, 304, 305, 314, 319, 349, 351, 364, 372, 393, 407, 429, 443, 447, 450, 452, 455, 463, 467, 490, 491, 511, 538, 544, 554, 564, 567, 583, 587, 593, 597, 609, 634, 635, 646, 647, 649, 652, 672, 676, 682, 686, 698, 718, 719, 741, 750, 751, 762], "int": [2, 6, 12, 13, 17, 26, 29, 30, 32, 40, 41, 42, 44, 50, 52, 53, 54, 57, 58, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 84, 91, 96, 98, 100, 103, 105, 109, 130, 134, 135, 136, 145, 146, 152, 153, 154, 158, 159, 160, 165, 166, 167, 170, 186, 203, 204, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 235, 239, 243, 244, 245, 249, 254, 267, 268, 269, 276, 280, 282, 297, 298, 300, 302, 304, 305, 308, 312, 327, 328, 334, 337, 339, 340, 341, 349, 351, 358, 359, 360, 361, 364, 365, 366, 371, 372, 392, 393, 396, 397, 399, 401, 402, 404, 405, 406, 407, 410, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 439, 444, 447, 449, 450, 451, 452, 463, 467, 474, 483, 532, 535, 538, 544, 554, 592, 593, 596, 597, 605, 606, 609, 610, 622, 626, 630, 632, 634, 635, 641, 642, 643, 646, 647, 681, 682, 685, 686, 694, 695, 698, 706, 710, 714, 716, 718, 719, 725, 733, 735, 736, 737, 738, 740, 741, 742, 743, 747, 749, 750, 751, 753, 754, 755, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 771], "set": [2, 4, 6, 7, 12, 13, 16, 20, 40, 50, 56, 72, 79, 93, 105, 107, 108, 117, 166, 174, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 230, 234, 235, 259, 260, 267, 279, 280, 283, 287, 300, 313, 314, 319, 320, 368, 371, 382, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 433, 443, 444, 460, 487, 511, 532, 535, 587, 606, 632, 676, 695, 716, 741, 742, 743, 747, 751, 753, 754, 755, 763, 764, 766, 767, 768], "number": [2, 6, 12, 13, 26, 27, 29, 30, 41, 51, 52, 58, 72, 76, 77, 83, 96, 105, 109, 130, 139, 145, 146, 152, 153, 154, 158, 160, 165, 167, 185, 186, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 230, 243, 249, 266, 267, 268, 269, 276, 282, 297, 298, 304, 349, 351, 358, 359, 360, 361, 364, 366, 372, 381, 393, 401, 402, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 436, 437, 439, 447, 450, 463, 467, 483, 522, 538, 542, 544, 554, 568, 570, 572, 574, 575, 580, 585, 586, 588, 593, 597, 605, 609, 610, 634, 635, 646, 647, 653, 655, 661, 663, 664, 669, 674, 675, 677, 682, 686, 694, 698, 718, 719, 741, 742, 751, 754, 762, 766, 767], "string": [2, 3, 15, 33, 38, 39, 50, 80, 96, 97, 105, 107, 108, 110, 215, 216, 217, 218, 219, 221, 222, 223, 240, 259, 261, 262, 267, 272, 274, 275, 280, 313, 314, 448, 470, 478, 482, 487, 490, 508, 511, 529, 563, 577, 584, 598, 648, 666, 673, 687, 741, 751, 765, 766, 768, 770, 779], "valu": [2, 24, 28, 29, 30, 34, 38, 39, 40, 45, 53, 54, 55, 56, 57, 60, 62, 63, 64, 66, 72, 76, 77, 80, 81, 82, 86, 96, 97, 98, 105, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 160, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 236, 237, 238, 242, 244, 245, 246, 247, 250, 251, 252, 253, 264, 268, 269, 274, 275, 277, 278, 284, 285, 286, 287, 288, 291, 293, 297, 298, 301, 302, 303, 308, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 336, 339, 340, 341, 343, 344, 349, 350, 351, 353, 354, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370, 371, 374, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 396, 397, 399, 400, 402, 404, 405, 406, 407, 410, 411, 412, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 436, 437, 441, 442, 443, 449, 451, 452, 453, 454, 462, 465, 466, 468, 469, 480, 482, 483, 485, 498, 499, 507, 527, 528, 532, 534, 542, 543, 545, 546, 547, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 565, 574, 578, 585, 589, 590, 593, 595, 596, 597, 599, 601, 602, 603, 605, 608, 609, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 628, 629, 632, 634, 635, 636, 641, 644, 648, 650, 663, 667, 674, 678, 679, 682, 684, 685, 686, 688, 690, 691, 692, 694, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 716, 718, 719, 720, 725, 731, 733, 734, 735, 736, 737, 741, 749, 750, 751, 761, 763, 764, 765, 766, 767, 768, 770, 772], "paramet": [2, 6, 12, 13, 16, 17, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 49, 50, 52, 54, 56, 58, 60, 61, 62, 64, 66, 67, 68, 70, 72, 74, 76, 77, 79, 80, 81, 82, 83, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 116, 117, 126, 128, 130, 131, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 158, 160, 161, 165, 166, 167, 170, 174, 183, 186, 188, 191, 192, 202, 203, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 239, 243, 244, 249, 250, 253, 254, 255, 259, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 279, 280, 282, 283, 287, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 304, 306, 307, 309, 310, 311, 312, 313, 314, 316, 319, 320, 329, 332, 334, 339, 340, 341, 345, 346, 347, 348, 349, 351, 352, 357, 358, 359, 360, 361, 364, 366, 367, 371, 372, 391, 393, 407, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 443, 444, 445, 447, 450, 451, 459, 460, 463, 464, 466, 467, 469, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 498, 501, 510, 511, 512, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 544, 551, 552, 554, 563, 564, 567, 577, 583, 584, 587, 591, 592, 593, 594, 596, 597, 598, 605, 606, 609, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 630, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 666, 672, 673, 676, 680, 681, 682, 683, 685, 686, 687, 694, 695, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 731, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768], "turn": [3, 15, 163, 253, 259, 267, 283, 290, 479, 741, 751, 770], "global": [3, 15, 259, 267, 470, 767, 770], "cach": [3, 15, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 299, 470, 479, 743, 751, 753, 755, 770], "format": [4, 5, 7, 27, 56, 105, 107, 266, 272, 287, 313, 582, 638, 671, 722, 740, 741, 745, 751, 752], "liter": [4, 7, 53, 54, 57, 58, 60, 82, 86, 114, 115, 209, 317, 318, 474, 475, 510, 512, 617, 628, 629, 701, 712, 713, 731, 742, 750, 760, 768, 772], "left": [4, 38, 39, 49, 50, 152, 153, 154, 169, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 279, 280, 359, 360, 361, 462, 511, 528, 626, 641, 710, 725, 763, 764], "center": [4, 152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 359, 360, 361, 418, 419, 420, 421, 422, 423, 425, 426, 427], "right": [4, 38, 39, 49, 50, 152, 153, 154, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 279, 280, 359, 360, 361, 443, 511, 630, 714, 741, 763, 764], "cell": 4, "align": [4, 641, 725], "rais": [4, 7, 70, 204, 460, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 612, 638, 722, 731, 763, 764], "keyerror": [4, 7], "wrong": [4, 7], "kei": [4, 7, 38, 50, 60, 62, 66, 69, 280, 293, 551], "chang": [5, 96, 97, 145, 182, 203, 215, 216, 217, 218, 219, 221, 222, 223, 349, 407, 438, 485, 673, 741, 752], "posit": [5, 314], "directli": [5, 152, 153, 154, 359, 360, 361, 767, 768], "below": [5, 24, 37, 169, 264, 772], "column": [5, 6, 8, 9, 10, 16, 22, 23, 24, 25, 26, 27, 32, 35, 37, 38, 39, 43, 44, 49, 50, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 66, 67, 68, 73, 74, 80, 81, 82, 86, 88, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 114, 115, 117, 126, 128, 155, 161, 182, 202, 205, 209, 211, 215, 216, 217, 218, 219, 221, 222, 223, 236, 237, 241, 255, 263, 264, 265, 266, 273, 274, 275, 279, 280, 283, 284, 285, 286, 287, 288, 291, 293, 295, 296, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 314, 317, 318, 470, 471, 476, 477, 478, 480, 481, 482, 483, 484, 485, 510, 512, 517, 520, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 551, 565, 568, 570, 572, 574, 575, 578, 579, 580, 585, 586, 588, 591, 612, 614, 634, 635, 638, 650, 653, 655, 661, 663, 664, 667, 668, 669, 674, 675, 677, 680, 718, 719, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 751, 753, 754, 755, 758, 759, 760, 761, 762, 763, 767, 771, 772, 779], "name": [5, 9, 10, 16, 20, 22, 23, 24, 32, 35, 49, 50, 56, 62, 66, 73, 86, 92, 93, 95, 101, 102, 103, 113, 155, 182, 192, 205, 241, 260, 263, 279, 280, 287, 293, 295, 301, 307, 310, 312, 314, 316, 338, 368, 415, 471, 472, 478, 484, 485, 511, 517, 526, 532, 533, 534, 535, 538, 584, 610, 612, 614, 642, 643, 644, 673, 726, 727, 728, 730, 738, 739, 740, 741, 742, 743, 744, 747, 748, 750, 751, 753, 754, 755, 758, 761, 762, 763, 764, 765, 766, 767, 768, 779], "exampl": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 329, 334, 338, 339, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 357, 358, 363, 364, 366, 367, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 396, 397, 398, 399, 400, 402, 407, 408, 409, 411, 412, 415, 417, 418, 419, 420, 422, 426, 428, 429, 431, 436, 440, 441, 442, 444, 445, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 469, 470, 471, 474, 475, 478, 480, 481, 482, 485, 511, 513, 514, 526, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 673, 682, 683, 686, 687, 689, 694, 695, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 718, 719, 720, 722, 731, 742, 749, 751, 752, 756, 757, 760, 761, 763, 764, 765, 766, 767, 768, 772], "pl": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 329, 334, 338, 339, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 357, 358, 363, 364, 366, 367, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 396, 397, 398, 399, 400, 402, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 422, 426, 428, 429, 431, 432, 433, 436, 440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 469, 470, 471, 474, 475, 478, 480, 481, 482, 483, 485, 510, 511, 512, 513, 514, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 666, 673, 682, 683, 686, 687, 689, 694, 695, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 718, 719, 720, 722, 730, 731, 739, 741, 742, 749, 751, 752, 756, 757, 760, 761, 763, 764, 765, 766, 767, 768, 772, 777], "5": [6, 16, 17, 18, 19, 21, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 50, 52, 56, 58, 62, 63, 64, 67, 71, 75, 83, 84, 85, 86, 87, 92, 94, 96, 97, 100, 101, 102, 103, 105, 112, 131, 133, 134, 145, 147, 154, 155, 157, 158, 164, 167, 170, 173, 176, 178, 179, 180, 187, 202, 203, 205, 207, 208, 212, 213, 214, 215, 216, 218, 222, 224, 231, 241, 243, 245, 249, 257, 266, 273, 275, 276, 278, 282, 285, 286, 287, 297, 298, 300, 302, 303, 304, 305, 309, 310, 312, 319, 322, 326, 329, 339, 345, 349, 350, 352, 364, 374, 407, 408, 409, 411, 412, 418, 419, 420, 422, 426, 429, 431, 440, 446, 463, 469, 475, 481, 485, 513, 514, 526, 530, 532, 533, 534, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 566, 580, 581, 585, 594, 597, 602, 608, 609, 618, 624, 625, 641, 646, 647, 648, 683, 686, 689, 698, 702, 708, 709, 757, 761, 767, 768], "df": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 257, 260, 264, 266, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 307, 308, 309, 312, 458, 471, 474, 475, 478, 481, 482, 513, 514, 526, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 683, 706, 708, 713, 718, 719, 749, 751, 756, 760, 761, 766, 767, 768, 772, 777], "str": [6, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 35, 37, 38, 39, 41, 43, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 67, 68, 69, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 117, 147, 155, 158, 159, 161, 163, 168, 174, 177, 182, 192, 202, 205, 211, 213, 215, 216, 217, 218, 219, 221, 222, 223, 229, 236, 237, 241, 244, 255, 260, 261, 262, 263, 264, 266, 268, 270, 272, 273, 274, 275, 277, 279, 280, 283, 287, 292, 293, 295, 296, 298, 299, 300, 301, 306, 307, 310, 312, 313, 314, 316, 334, 350, 364, 365, 366, 368, 396, 399, 403, 404, 405, 415, 432, 433, 470, 471, 472, 473, 476, 477, 478, 481, 482, 483, 484, 485, 490, 510, 511, 512, 513, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 577, 582, 584, 591, 592, 598, 610, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 666, 671, 673, 681, 687, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 722, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 765, 766, 767, 768, 771, 777, 782], "i": [6, 16, 17, 24, 26, 34, 37, 38, 39, 40, 44, 45, 47, 50, 51, 54, 56, 60, 62, 70, 72, 79, 82, 85, 87, 93, 94, 96, 97, 102, 105, 107, 108, 109, 114, 115, 116, 117, 145, 152, 153, 154, 157, 163, 166, 168, 170, 183, 191, 202, 208, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 230, 234, 235, 236, 237, 253, 259, 264, 267, 273, 274, 275, 278, 280, 283, 287, 290, 300, 306, 310, 313, 314, 318, 319, 320, 349, 358, 359, 360, 361, 363, 370, 371, 374, 375, 376, 378, 388, 390, 391, 412, 414, 416, 429, 430, 431, 432, 433, 434, 443, 444, 447, 456, 460, 466, 467, 470, 474, 476, 479, 480, 481, 483, 485, 509, 511, 517, 519, 520, 528, 530, 533, 534, 535, 539, 541, 551, 577, 594, 596, 606, 613, 618, 622, 623, 624, 626, 630, 632, 635, 638, 641, 645, 666, 673, 683, 685, 695, 702, 706, 707, 708, 710, 714, 716, 719, 725, 731, 741, 743, 747, 749, 751, 752, 753, 754, 755, 756, 761, 765, 766, 767, 768, 774], "rang": [6, 26, 38, 169, 358, 407, 474, 481, 485, 510, 511, 512, 565, 574, 575, 578, 579, 584, 585, 650, 663, 664, 667, 668, 673, 674, 749], "100": [6, 419, 420, 422, 474, 641, 741, 751, 754], "shape": [6, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 264, 266, 270, 273, 275, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 314, 319, 320, 321, 322, 323, 324, 325, 326, 329, 334, 338, 339, 343, 344, 345, 346, 347, 348, 349, 350, 363, 364, 366, 367, 371, 372, 374, 377, 379, 382, 383, 384, 385, 386, 387, 389, 400, 407, 408, 409, 412, 415, 416, 417, 418, 419, 420, 422, 426, 428, 429, 436, 440, 441, 442, 444, 445, 446, 450, 451, 452, 453, 454, 457, 458, 462, 464, 465, 466, 469, 470, 471, 475, 478, 480, 481, 482, 485, 511, 513, 514, 524, 526, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 673, 682, 683, 686, 687, 689, 694, 695, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 718, 719, 720, 722, 751, 752, 756, 760, 761, 767, 768, 772], "1": [6, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 260, 264, 265, 266, 270, 273, 274, 275, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 329, 334, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 359, 360, 361, 363, 364, 366, 367, 371, 372, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 396, 397, 398, 399, 400, 402, 407, 408, 409, 411, 412, 415, 416, 417, 423, 426, 428, 429, 430, 431, 436, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 469, 470, 471, 474, 475, 478, 480, 481, 482, 485, 510, 511, 512, 513, 514, 526, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 663, 664, 666, 667, 668, 673, 674, 682, 683, 685, 686, 689, 694, 695, 698, 700, 706, 708, 718, 719, 722, 731, 738, 739, 741, 751, 752, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 771, 772], "0": [6, 16, 17, 18, 19, 21, 22, 25, 29, 30, 33, 34, 36, 38, 40, 44, 49, 53, 54, 55, 57, 58, 59, 63, 64, 68, 72, 73, 77, 79, 80, 81, 82, 88, 91, 93, 94, 96, 97, 98, 101, 102, 103, 109, 111, 112, 118, 119, 120, 121, 122, 123, 126, 127, 128, 131, 133, 137, 138, 140, 145, 148, 149, 152, 153, 154, 156, 159, 160, 164, 166, 169, 172, 175, 176, 178, 179, 180, 183, 188, 189, 191, 193, 194, 195, 196, 201, 203, 204, 207, 208, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 238, 239, 242, 246, 247, 248, 254, 257, 265, 279, 286, 291, 295, 298, 299, 302, 308, 309, 310, 312, 314, 321, 322, 323, 324, 325, 326, 329, 334, 338, 343, 344, 349, 350, 352, 357, 359, 360, 361, 371, 379, 381, 383, 384, 385, 386, 387, 391, 397, 398, 407, 411, 412, 418, 420, 423, 429, 440, 441, 442, 446, 447, 453, 454, 457, 462, 467, 474, 475, 481, 485, 514, 528, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 565, 568, 571, 572, 576, 578, 580, 581, 586, 589, 590, 594, 596, 602, 622, 641, 653, 661, 669, 675, 683, 685, 700, 706, 708, 725, 739, 741, 742, 743, 747, 749, 751, 752, 753, 754, 755, 757, 761, 765, 766, 767, 768, 772], "2": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 115, 116, 117, 124, 126, 127, 128, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 144, 145, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 314, 316, 319, 320, 322, 326, 329, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 359, 360, 361, 363, 364, 366, 367, 371, 372, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 394, 396, 397, 398, 399, 400, 402, 407, 408, 409, 411, 412, 415, 417, 418, 419, 420, 423, 426, 428, 429, 431, 436, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 469, 470, 471, 475, 478, 480, 481, 482, 485, 513, 514, 526, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 566, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580, 581, 584, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 616, 618, 621, 623, 624, 625, 628, 629, 632, 634, 635, 636, 639, 640, 642, 643, 645, 646, 647, 648, 673, 682, 683, 686, 687, 689, 694, 695, 698, 700, 702, 707, 708, 712, 713, 718, 719, 731, 749, 751, 752, 756, 757, 760, 761, 763, 764, 767, 772], "98": [6, 44, 236, 237, 244], "99": [6, 29, 30, 44, 47, 112, 158, 160, 236, 237, 244, 357, 364], "i64": [6, 8, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 30, 31, 35, 36, 37, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 76, 77, 79, 80, 82, 83, 84, 86, 91, 93, 94, 95, 96, 97, 99, 101, 102, 103, 113, 116, 117, 130, 134, 141, 142, 143, 144, 146, 147, 155, 157, 158, 160, 161, 162, 165, 167, 168, 169, 170, 173, 176, 178, 179, 180, 182, 184, 187, 190, 191, 192, 193, 196, 197, 202, 203, 205, 206, 209, 210, 212, 213, 225, 227, 228, 230, 231, 235, 236, 241, 242, 243, 244, 245, 250, 252, 255, 257, 264, 266, 270, 273, 275, 278, 279, 284, 287, 288, 289, 296, 297, 298, 300, 303, 305, 307, 309, 310, 312, 314, 319, 320, 339, 345, 346, 347, 348, 350, 363, 364, 366, 367, 372, 374, 382, 400, 415, 419, 422, 426, 429, 436, 440, 444, 445, 450, 451, 452, 458, 464, 466, 469, 471, 478, 480, 482, 514, 526, 530, 531, 532, 533, 534, 535, 539, 540, 541, 543, 544, 545, 546, 549, 551, 553, 554, 563, 566, 567, 569, 571, 573, 576, 581, 583, 594, 595, 596, 599, 601, 603, 604, 607, 608, 611, 628, 629, 643, 645, 646, 647, 648, 683, 751, 756, 760, 761, 768, 772], "10": [6, 19, 28, 36, 38, 39, 41, 43, 44, 45, 58, 61, 63, 67, 68, 83, 94, 102, 105, 109, 116, 124, 125, 126, 127, 128, 134, 139, 144, 146, 148, 149, 163, 166, 167, 169, 174, 185, 186, 189, 203, 216, 235, 243, 274, 275, 278, 289, 303, 310, 320, 339, 357, 363, 372, 382, 393, 395, 407, 450, 485, 511, 514, 538, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 587, 593, 597, 605, 606, 609, 641, 682, 686, 694, 695, 698, 749, 751, 757, 762], "3": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 112, 113, 114, 117, 126, 127, 128, 130, 131, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 192, 197, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 236, 237, 238, 241, 243, 244, 245, 251, 252, 253, 255, 257, 260, 264, 265, 266, 270, 273, 274, 275, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 314, 316, 319, 320, 321, 323, 324, 325, 329, 334, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 363, 364, 366, 367, 371, 372, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 396, 397, 398, 399, 400, 402, 407, 408, 409, 411, 412, 415, 417, 418, 422, 426, 428, 429, 431, 436, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 464, 465, 466, 467, 469, 470, 471, 475, 478, 480, 481, 482, 485, 511, 514, 526, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 564, 565, 566, 567, 568, 572, 574, 578, 579, 580, 583, 584, 585, 586, 587, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 619, 620, 621, 622, 625, 627, 631, 632, 633, 634, 635, 636, 637, 642, 643, 645, 646, 647, 648, 673, 682, 683, 686, 689, 694, 695, 698, 703, 704, 705, 706, 709, 716, 720, 731, 742, 751, 752, 756, 757, 760, 761, 763, 764, 772], "4": [6, 16, 17, 18, 19, 21, 24, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 58, 60, 61, 62, 63, 67, 71, 75, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 111, 112, 116, 117, 127, 130, 131, 133, 134, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 156, 157, 159, 160, 164, 165, 167, 168, 169, 170, 176, 178, 179, 180, 185, 187, 189, 192, 202, 204, 205, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 228, 229, 231, 235, 236, 237, 238, 241, 243, 244, 245, 248, 257, 264, 266, 273, 274, 275, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 319, 322, 329, 339, 349, 350, 352, 363, 366, 374, 377, 382, 384, 385, 386, 387, 389, 407, 408, 409, 412, 426, 429, 431, 440, 444, 445, 451, 452, 462, 469, 470, 475, 480, 482, 511, 514, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 565, 569, 572, 573, 574, 578, 579, 581, 584, 585, 586, 588, 593, 594, 597, 605, 606, 609, 617, 626, 630, 632, 634, 635, 638, 645, 646, 647, 668, 673, 682, 683, 686, 694, 695, 698, 701, 709, 710, 714, 716, 718, 719, 722, 751, 757, 760, 761, 763, 764, 768, 772], "95": [6, 112], "96": [6, 112], "97": [6, 44, 112], "ascii_ful": 7, "ascii_no_bord": 7, "ascii_borders_onli": 7, "ascii_borders_only_condens": 7, "ascii_horizontal_onli": 7, "ascii_markdown": 7, "utf8_ful": 7, "utf8_no_bord": 7, "utf8_borders_onli": 7, "utf8_horizontal_onli": 7, "noth": [7, 618, 622, 623, 624, 702, 706, 707, 708], "style": [7, 62], "hide": [8, 9, 10, 11], "f64": [8, 18, 19, 21, 22, 24, 25, 29, 30, 33, 36, 44, 49, 50, 54, 55, 63, 64, 79, 80, 81, 94, 98, 101, 102, 111, 118, 119, 120, 121, 122, 123, 131, 133, 137, 138, 145, 148, 149, 151, 152, 153, 154, 155, 156, 164, 169, 176, 178, 179, 180, 183, 188, 189, 194, 195, 203, 204, 207, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 232, 233, 234, 238, 239, 246, 247, 254, 257, 264, 279, 285, 286, 291, 302, 308, 309, 310, 321, 322, 323, 324, 325, 326, 343, 344, 349, 350, 407, 418, 420, 428, 441, 442, 446, 453, 454, 481, 485, 526, 543, 545, 546, 547, 548, 549, 552, 553, 580, 602, 752, 767], "etc": [8, 474, 533, 535, 741, 743, 747, 753, 755], "separ": [10, 93, 105, 163, 482, 598, 687], "from": [10, 16, 21, 22, 26, 28, 38, 39, 50, 51, 56, 66, 70, 72, 74, 93, 94, 96, 97, 105, 140, 155, 169, 183, 199, 200, 203, 225, 236, 237, 251, 253, 263, 264, 267, 272, 274, 275, 287, 292, 293, 296, 306, 311, 319, 354, 358, 376, 391, 404, 405, 407, 429, 466, 469, 510, 511, 512, 513, 526, 530, 531, 532, 533, 534, 535, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 622, 638, 650, 651, 653, 654, 655, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 706, 731, 740, 741, 742, 743, 745, 746, 747, 749, 751, 753, 754, 755, 765, 766, 767, 768], "row": [10, 12, 16, 17, 24, 28, 31, 33, 38, 40, 41, 46, 48, 50, 51, 52, 56, 79, 83, 84, 87, 94, 96, 103, 105, 107, 109, 117, 157, 163, 167, 186, 203, 212, 235, 243, 259, 264, 267, 270, 271, 274, 276, 280, 281, 282, 283, 287, 300, 304, 305, 306, 312, 319, 363, 372, 393, 407, 416, 444, 450, 519, 522, 525, 528, 532, 533, 535, 538, 541, 544, 554, 646, 647, 741, 742, 743, 747, 751, 753, 754, 755, 762, 766, 767], "inform": [11, 134, 135, 136, 183, 234, 290, 339, 340, 341, 391, 443], "when": [11, 16, 17, 25, 26, 28, 30, 33, 38, 70, 134, 135, 136, 152, 153, 154, 160, 191, 269, 314, 319, 339, 340, 341, 358, 359, 360, 361, 366, 432, 433, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 613, 638, 741, 743, 747, 751, 753, 754, 767, 768, 770], "displai": 11, "width": [13, 16, 626, 630, 641, 710, 714, 725, 741], "draw": 13, "char": [13, 470], "utf8": [14, 25, 26, 33, 73, 89, 157, 163, 265, 295, 363, 390, 460, 470, 482, 598, 616, 620, 622, 623, 624, 632, 633, 634, 635, 638, 671, 687, 700, 704, 706, 707, 708, 716, 717, 718, 719, 722, 741, 751, 765], "off": [15, 253, 259, 267, 283, 290, 479, 741, 751, 770], "class": [16, 25, 73, 89, 90, 110, 265, 295, 314, 356, 458, 459, 460, 470, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 530, 534, 765, 766, 779, 781], "dict": [16, 60, 66, 73, 86, 87, 109, 283, 293, 295, 368, 531, 532, 645, 741, 742, 743, 744, 747, 748, 751, 753, 755, 767], "sequenc": [16, 28, 37, 49, 74, 93, 97, 102, 155, 170, 174, 191, 279, 296, 301, 310, 314, 319, 382, 433, 471, 472, 473, 476, 478, 479, 480, 481, 482, 501, 526, 528, 531, 532, 533, 535, 539, 644, 732, 733, 736, 756, 760, 761, 766, 767, 768], "ani": [16, 17, 24, 28, 30, 31, 33, 60, 61, 70, 71, 86, 87, 89, 90, 96, 105, 117, 131, 160, 174, 191, 212, 214, 229, 236, 244, 264, 269, 289, 314, 319, 320, 366, 382, 416, 418, 433, 451, 459, 460, 473, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 527, 531, 532, 533, 535, 580, 591, 594, 615, 638, 669, 680, 683, 722, 731, 741, 751, 765, 767, 768], "np": [16, 31, 38, 89, 172, 175, 244, 314, 379, 383, 384, 385, 418, 433, 451, 460, 533], "ndarrai": [16, 31, 89, 244, 314, 433, 451, 460, 533], "pa": [16, 85, 456, 530, 752], "pd": [16, 90, 248, 461, 462, 534, 742, 749], "pli": [16, 31, 38, 39, 49, 62, 244, 274, 275, 279, 451, 511, 528, 552, 563, 564, 567, 583, 587, 593, 610, 619, 620, 648, 649, 652, 672, 676, 682, 703, 704, 739], "none": [16, 17, 18, 21, 24, 29, 30, 38, 39, 40, 45, 49, 50, 56, 59, 70, 72, 77, 79, 86, 88, 93, 94, 95, 96, 97, 102, 104, 105, 106, 107, 108, 109, 113, 116, 117, 127, 130, 134, 139, 148, 149, 152, 153, 154, 155, 158, 159, 160, 165, 166, 169, 176, 177, 178, 179, 180, 182, 185, 191, 201, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 229, 230, 231, 235, 248, 257, 264, 268, 269, 274, 275, 278, 279, 280, 283, 287, 298, 299, 300, 306, 307, 310, 313, 314, 320, 327, 328, 338, 339, 350, 352, 357, 359, 360, 361, 364, 365, 366, 370, 371, 373, 374, 386, 387, 391, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 433, 437, 439, 440, 443, 444, 447, 455, 462, 467, 471, 473, 482, 483, 485, 490, 499, 511, 512, 513, 526, 527, 531, 532, 533, 534, 535, 536, 584, 596, 606, 610, 616, 617, 619, 620, 621, 624, 625, 626, 630, 632, 634, 635, 636, 638, 641, 642, 643, 645, 673, 685, 695, 700, 701, 703, 704, 705, 708, 709, 710, 714, 716, 718, 719, 720, 722, 731, 732, 740, 741, 742, 743, 745, 747, 749, 750, 751, 753, 754, 755, 757, 759, 760, 763, 764, 765, 766, 767, 768, 770, 771], "columnstyp": 16, "orient": [16, 107, 533, 535], "two": [16, 33, 56, 62, 92, 112, 147, 236, 237, 244, 287, 352, 471, 484, 531, 533, 535, 539, 540, 541, 551, 738, 749, 758, 760], "dimension": [16, 314, 531, 533, 535], "structur": [16, 28, 319, 518, 523, 524], "repres": [16, 105, 314, 433, 447, 467, 478, 499, 507, 511, 530, 531, 533, 534, 535, 575, 664, 731], "panda": [16, 90, 248, 461, 462, 534, 742, 749, 757], "variou": [16, 110, 314, 779], "form": [16, 96, 203, 314, 407], "must": [16, 38, 39, 50, 70, 155, 191, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 283, 314, 485, 531, 533, 535, 763], "contain": [16, 62, 174, 290, 314, 368, 401, 456, 531, 534, 618, 621, 622, 623, 624, 635, 636, 702, 705, 706, 707, 708, 719, 720], "mai": [16, 26, 28, 50, 76, 77, 96, 109, 145, 155, 158, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 283, 297, 298, 312, 319, 349, 358, 364, 436, 437, 480, 485, 528, 530, 564, 570, 605, 645, 649, 655, 673, 694, 741, 743, 752, 753], "other": [16, 24, 28, 34, 49, 50, 56, 70, 116, 134, 135, 136, 147, 174, 237, 248, 264, 279, 280, 287, 311, 314, 319, 339, 340, 341, 352, 382, 431, 462, 469, 511, 591, 680, 741, 742, 751, 763, 764, 779], "datatyp": [16, 17, 25, 33, 73, 105, 117, 131, 155, 191, 248, 265, 283, 295, 314, 320, 334, 350, 356, 373, 376, 388, 390, 462, 473, 478, 526, 638, 645, 722, 731, 732, 741, 742, 744, 748, 765, 766, 767, 768, 779], "pair": [16, 66, 293], "default": [16, 26, 37, 39, 40, 50, 56, 62, 72, 103, 104, 105, 106, 107, 108, 109, 151, 166, 170, 188, 199, 200, 203, 208, 225, 230, 273, 275, 280, 287, 313, 314, 357, 358, 371, 404, 405, 407, 412, 429, 447, 467, 476, 530, 531, 533, 534, 535, 563, 606, 610, 622, 632, 638, 648, 695, 706, 716, 731, 741, 751, 765, 766, 767, 768], "label": [16, 214, 215, 216, 217, 218, 219, 221, 222, 223, 418, 419, 420, 421, 422, 423, 425, 426, 427, 485, 531, 533, 535], "result": [16, 28, 38, 77, 105, 107, 108, 152, 153, 154, 183, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 227, 229, 256, 283, 298, 313, 319, 359, 360, 361, 391, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 434, 437, 460, 531, 533, 535, 539, 633, 634, 717, 718, 732, 749, 751, 753, 755, 761, 768], "If": [16, 17, 28, 38, 39, 50, 56, 60, 72, 79, 89, 90, 93, 105, 107, 108, 109, 117, 134, 135, 136, 161, 183, 191, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 230, 234, 235, 236, 237, 249, 274, 275, 279, 280, 283, 287, 300, 313, 314, 319, 320, 339, 340, 341, 370, 391, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 434, 443, 444, 456, 460, 463, 470, 471, 474, 476, 483, 485, 511, 531, 533, 534, 535, 541, 551, 606, 632, 633, 634, 635, 638, 645, 695, 716, 717, 718, 719, 722, 731, 741, 742, 743, 747, 749, 751, 753, 754, 755], "specifi": [16, 26, 30, 105, 152, 153, 154, 160, 211, 269, 314, 358, 359, 360, 361, 366, 511, 520, 531, 533, 535, 626, 630, 710, 714, 767], "overrid": [16, 531, 765, 766, 768], "alreadi": [16, 145, 349, 531, 594, 683], "present": [16, 174, 531, 767], "match": [16, 50, 70, 280, 480, 522, 531, 533, 535, 617, 618, 621, 623, 624, 628, 629, 636, 638, 701, 702, 705, 707, 708, 712, 713, 720, 722, 763, 764], "dimens": [16, 212, 416, 531, 533, 535], "col": [16, 17, 31, 37, 38, 39, 47, 61, 70, 80, 95, 101, 102, 105, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 177, 181, 182, 183, 184, 188, 189, 190, 193, 194, 195, 196, 198, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 270, 273, 275, 277, 289, 307, 309, 310, 416, 474, 475, 481, 482, 513, 527, 529, 533, 535, 537, 539, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 666, 683, 706, 708, 722, 739, 751, 760, 761, 766, 767, 772, 777], "whether": [16, 38, 39, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 475, 511, 533, 535, 768], "interpret": [16, 533, 535, 741, 751], "infer": [16, 17, 105, 212, 314, 416, 533, 535, 638, 741, 742, 751, 754, 765], "thi": [16, 17, 24, 26, 28, 33, 37, 38, 39, 40, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 72, 74, 77, 79, 81, 82, 85, 87, 89, 90, 93, 94, 96, 97, 98, 99, 103, 105, 107, 109, 114, 116, 117, 126, 128, 139, 145, 155, 157, 158, 163, 168, 169, 170, 174, 185, 190, 191, 199, 200, 202, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227, 229, 230, 235, 236, 237, 249, 250, 251, 252, 253, 256, 259, 264, 267, 273, 274, 275, 277, 280, 283, 287, 290, 296, 298, 299, 300, 306, 311, 312, 313, 314, 319, 320, 329, 332, 349, 354, 356, 358, 363, 364, 370, 375, 376, 381, 382, 388, 390, 392, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 425, 426, 427, 429, 432, 433, 434, 435, 437, 438, 439, 444, 445, 447, 449, 456, 458, 459, 460, 461, 463, 464, 467, 468, 470, 471, 474, 475, 479, 480, 481, 483, 485, 509, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 541, 563, 564, 570, 577, 587, 594, 598, 612, 613, 626, 630, 641, 642, 645, 648, 649, 655, 666, 673, 676, 683, 687, 710, 714, 725, 726, 729, 741, 742, 743, 747, 751, 752, 753, 754, 755, 756, 761, 763, 764, 765, 766, 767, 768, 770, 774, 779, 781], "doe": [16, 28, 251, 267, 273, 283, 319, 370, 438, 468, 522, 527, 533, 535, 587, 643, 676, 741, 742, 751, 763, 764], "yield": [16, 26, 28, 93, 319, 358, 533, 535, 741, 751], "conclus": [16, 533, 535], "note": [16, 29, 37, 38, 39, 49, 50, 54, 70, 87, 89, 93, 94, 97, 143, 144, 148, 149, 215, 216, 217, 218, 219, 221, 222, 223, 234, 242, 259, 267, 268, 274, 275, 276, 282, 299, 306, 347, 348, 432, 433, 438, 443, 449, 460, 511, 533, 535, 551, 577, 594, 638, 666, 683, 741, 749, 766, 767, 768, 774], "some": [16, 24, 264, 382, 741, 751], "method": [16, 17, 24, 45, 64, 104, 106, 109, 110, 114, 117, 129, 132, 150, 207, 208, 215, 216, 217, 218, 219, 221, 222, 223, 240, 251, 264, 278, 291, 314, 320, 333, 335, 355, 374, 411, 412, 423, 448, 462, 470, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 541, 552, 645, 739, 741, 742, 765, 777, 779, 782], "intern": [16, 27, 29, 36, 37, 43, 74, 80, 86, 101, 102, 147, 159, 170, 202, 204, 211, 226, 229, 235, 237, 266, 268, 270, 273, 277, 290, 296, 298, 301, 309, 310, 365, 367, 437, 458, 473, 474, 475, 476, 479, 481, 482, 484, 510, 512, 529, 733, 736, 738, 742, 750, 756, 758, 760, 761, 763, 765, 767, 772], "convert": [16, 71, 86, 87, 88, 89, 90, 92, 459, 460, 461, 534, 536, 610, 729, 742, 749], "befor": [16, 28, 50, 95, 143, 144, 145, 203, 214, 215, 216, 217, 218, 219, 221, 222, 223, 242, 277, 280, 307, 319, 347, 348, 349, 407, 418, 419, 420, 421, 422, 423, 425, 426, 427, 449, 641, 725, 751], "collect": [16, 51, 85, 117, 202, 264, 266, 267, 270, 273, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 305, 308, 309, 310, 312, 474, 479, 481, 645, 750, 752, 760], "back": [16, 28, 319], "can": [16, 17, 25, 33, 37, 38, 62, 80, 93, 96, 110, 117, 145, 155, 169, 182, 197, 210, 215, 216, 217, 218, 219, 221, 222, 223, 227, 234, 253, 259, 274, 301, 312, 314, 320, 349, 400, 414, 434, 443, 471, 474, 478, 511, 518, 526, 539, 541, 565, 568, 570, 572, 574, 575, 577, 578, 579, 580, 585, 586, 588, 594, 610, 624, 645, 650, 653, 655, 661, 663, 664, 666, 667, 668, 669, 674, 675, 677, 683, 708, 733, 741, 742, 743, 751, 752, 753, 761, 766, 767, 768, 777], "lead": [16, 227, 244, 253, 283, 434, 627, 631, 637, 641, 645, 711, 721, 725, 733, 736], "unexpect": [16, 521], "behavior": [16, 117, 473, 733, 736], "subclass": 16, "For": [16, 28, 39, 49, 50, 80, 131, 210, 234, 275, 280, 319, 414, 443, 460, 528, 529, 541, 613, 742], "mydatafram": 16, "pass": [16, 17, 109, 168, 277, 283, 299, 320, 511, 531, 567, 652, 742, 766, 767, 768], "isinst": [16, 767, 768], "lazi": [16, 50, 117, 202, 257, 260, 264, 265, 266, 270, 273, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 474, 480, 539, 645, 751, 767, 779, 781], "fals": [16, 18, 19, 21, 33, 34, 36, 37, 38, 43, 44, 46, 47, 48, 50, 54, 58, 60, 62, 63, 72, 78, 80, 86, 90, 93, 94, 97, 99, 102, 107, 109, 114, 115, 126, 128, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 234, 236, 237, 249, 250, 253, 257, 259, 267, 273, 274, 279, 280, 283, 290, 299, 301, 310, 314, 319, 329, 332, 334, 338, 345, 346, 347, 348, 349, 357, 359, 360, 361, 367, 375, 377, 379, 382, 383, 384, 385, 386, 387, 389, 391, 408, 409, 412, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 434, 438, 443, 445, 459, 460, 463, 464, 466, 468, 469, 474, 475, 476, 479, 542, 543, 545, 546, 547, 549, 553, 580, 592, 594, 607, 617, 619, 621, 628, 629, 633, 634, 636, 638, 669, 683, 696, 701, 703, 705, 712, 713, 717, 718, 720, 722, 731, 741, 742, 743, 747, 750, 751, 754, 755, 760, 763, 764, 765, 766, 767, 768, 772], "construct": [16, 272, 292, 314, 530, 531, 532, 533, 534, 535], "dictionari": [16, 60, 86, 87, 350, 368, 531, 532, 535, 741, 744, 748, 751], "b": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 113, 116, 117, 127, 130, 131, 132, 139, 147, 148, 149, 155, 157, 159, 160, 161, 165, 166, 169, 172, 175, 176, 177, 178, 179, 180, 182, 185, 187, 192, 197, 201, 205, 213, 235, 240, 241, 251, 253, 255, 257, 260, 264, 265, 266, 270, 273, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 319, 350, 352, 357, 358, 366, 382, 390, 415, 431, 465, 470, 471, 480, 482, 484, 514, 526, 529, 530, 531, 532, 533, 534, 535, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 591, 594, 598, 600, 628, 642, 643, 645, 646, 647, 648, 683, 712, 738, 742, 758, 760, 761], "notic": [16, 314], "dtype": [16, 38, 39, 50, 90, 117, 118, 119, 120, 121, 122, 123, 126, 128, 131, 134, 135, 136, 137, 138, 143, 144, 155, 157, 163, 190, 191, 210, 211, 215, 216, 217, 218, 219, 221, 222, 223, 232, 233, 242, 244, 246, 247, 248, 252, 253, 274, 275, 280, 314, 334, 338, 339, 340, 341, 347, 348, 358, 363, 373, 378, 417, 431, 449, 460, 462, 473, 481, 483, 526, 566, 569, 571, 573, 576, 581, 587, 589, 590, 591, 598, 616, 632, 651, 654, 659, 662, 665, 670, 676, 678, 679, 680, 687, 700, 716, 722, 731, 732, 741, 751, 760, 765, 766, 767, 768], "automat": [16, 314, 741, 749, 751, 767, 768], "int64": [16, 25, 33, 38, 39, 61, 73, 85, 143, 144, 155, 210, 242, 248, 265, 274, 275, 289, 295, 314, 347, 348, 356, 414, 431, 449, 460, 462, 526, 566, 569, 571, 573, 576, 581, 651, 654, 659, 662, 665, 670], "In": [16, 17, 26, 28, 38, 39, 117, 236, 237, 274, 275, 314, 319, 358, 413, 612, 755, 767, 768], "order": [16, 37, 38, 39, 60, 62, 72, 94, 97, 126, 128, 132, 208, 225, 226, 227, 236, 237, 250, 251, 273, 274, 275, 301, 306, 329, 332, 412, 417, 429, 430, 434, 464, 465, 476, 563, 643, 648, 728, 763], "your": [16, 259, 276, 282, 283, 741, 763, 764], "initi": [16, 528], "list": [16, 20, 22, 24, 25, 26, 27, 31, 36, 38, 39, 43, 50, 56, 58, 60, 62, 71, 80, 86, 87, 88, 93, 94, 95, 96, 102, 110, 112, 129, 155, 157, 163, 182, 191, 202, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 229, 236, 237, 244, 260, 263, 264, 265, 266, 270, 273, 274, 275, 280, 287, 306, 307, 310, 311, 314, 333, 337, 358, 363, 367, 373, 382, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 451, 459, 479, 481, 485, 490, 514, 536, 540, 551, 613, 614, 623, 633, 642, 643, 707, 717, 727, 728, 733, 736, 740, 741, 743, 747, 749, 751, 760, 761, 766, 767, 768, 779], "col1": [16, 96], "float32": [16, 33, 105, 314, 378], "col2": [16, 96], "df2": [16, 28, 34, 99, 470, 480, 763], "f32": [16, 208, 314, 412, 514, 594, 683], "Or": [16, 38, 39, 50, 97, 202, 274, 275, 280, 772], "compat": [16, 109], "all": [16, 24, 46, 48, 51, 54, 56, 58, 65, 79, 88, 97, 110, 115, 116, 129, 130, 132, 139, 145, 150, 155, 165, 166, 169, 172, 175, 176, 178, 179, 180, 185, 187, 191, 192, 197, 201, 205, 208, 213, 235, 240, 241, 253, 264, 283, 287, 300, 314, 333, 335, 349, 355, 377, 389, 412, 444, 448, 478, 479, 480, 488, 511, 526, 530, 532, 534, 535, 536, 594, 598, 608, 618, 623, 624, 628, 629, 683, 687, 697, 702, 707, 708, 712, 713, 741, 742, 743, 751, 753, 754, 760, 765, 766, 768, 777, 779], "valid": [16, 26, 145, 236, 349, 358, 370, 617, 618, 622, 623, 624, 701, 702, 706, 707, 708, 712, 713, 743, 747, 768], "df3": 16, "numpi": [16, 89, 199, 200, 314, 379, 383, 384, 385, 404, 405, 418, 460, 468, 533, 757], "import": [16, 21, 38, 50, 90, 96, 97, 105, 283, 343, 376, 379, 383, 384, 385, 418, 441, 453, 490, 511, 513, 530, 533, 534, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 673, 731, 749, 751, 752, 765, 766, 767, 768], "arrai": [16, 26, 85, 89, 134, 135, 136, 140, 141, 142, 143, 144, 189, 215, 216, 218, 221, 222, 223, 227, 314, 339, 340, 341, 345, 346, 347, 348, 358, 395, 419, 420, 422, 425, 426, 427, 434, 438, 456, 460, 468, 481, 498, 514, 530, 533, 591, 600, 601, 602, 603, 604, 607, 608, 618, 620, 622, 623, 624, 680, 689, 690, 691, 692, 693, 696, 697, 702, 704, 706, 707, 708, 741], "df4": 16, "6": [16, 17, 20, 22, 23, 24, 25, 27, 28, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 47, 49, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 102, 103, 105, 117, 130, 131, 143, 144, 147, 151, 157, 159, 160, 165, 167, 169, 187, 202, 206, 208, 209, 212, 215, 216, 217, 218, 219, 221, 222, 223, 236, 237, 243, 245, 260, 264, 265, 266, 270, 273, 275, 278, 279, 287, 295, 296, 297, 298, 300, 305, 307, 309, 310, 312, 319, 343, 347, 348, 350, 352, 363, 412, 431, 449, 471, 514, 530, 532, 533, 534, 535, 539, 544, 551, 553, 554, 565, 577, 578, 579, 580, 586, 618, 646, 647, 675, 702, 760, 761], "c": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 36, 37, 38, 41, 43, 44, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 93, 94, 96, 98, 99, 102, 105, 109, 117, 251, 253, 257, 260, 264, 265, 266, 270, 273, 279, 287, 295, 296, 300, 310, 350, 390, 465, 470, 471, 482, 529, 534, 542, 543, 544, 545, 546, 547, 549, 551, 553, 554, 591, 598, 600, 634, 638, 645, 646, 647, 718, 722, 742, 751, 760, 761, 766], "attribut": [16, 110, 314, 490, 491, 498, 765, 779], "get": [16, 20, 25, 35, 36, 38, 39, 41, 42, 46, 48, 52, 58, 70, 73, 75, 79, 83, 88, 100, 112, 124, 125, 126, 127, 128, 140, 141, 142, 143, 144, 162, 167, 171, 173, 181, 184, 186, 193, 194, 195, 196, 199, 200, 207, 235, 239, 242, 243, 250, 254, 260, 265, 271, 274, 275, 276, 281, 282, 295, 300, 304, 314, 327, 328, 329, 330, 331, 332, 337, 345, 346, 347, 348, 356, 368, 372, 373, 377, 380, 389, 393, 396, 398, 399, 401, 403, 404, 405, 408, 409, 411, 444, 447, 450, 455, 456, 457, 464, 467, 468, 509, 527, 538, 544, 554, 556, 557, 558, 559, 560, 561, 562, 567, 595, 599, 600, 611, 612, 614, 625, 646, 647, 652, 684, 688, 689, 699, 709, 727, 733, 734, 735, 736, 744, 748, 759, 762, 769, 771], "height": [16, 24], "schema": [16, 17, 18, 19, 25, 257, 258, 265, 283, 342, 480, 523, 612, 645, 741, 744, 748, 751, 754, 767], "__init__": [16, 110, 314, 470, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 765], "f": [17, 21, 24, 52, 85, 93, 96, 117, 191, 192, 264, 283, 310, 473, 481, 528, 541, 610, 638, 645, 722, 732], "callabl": [17, 33, 61, 117, 191, 192, 214, 283, 289, 320, 418, 473, 528, 541, 610, 645, 732, 751], "tupl": [17, 70, 71, 75, 212, 290, 299, 416, 435, 749], "return_dtyp": [17, 117, 191, 320, 473, 732], "option": [17, 24, 40, 50, 56, 70, 72, 79, 86, 88, 93, 97, 102, 117, 130, 152, 153, 154, 165, 166, 183, 191, 214, 215, 216, 217, 218, 219, 221, 222, 223, 230, 234, 235, 264, 279, 280, 287, 299, 300, 310, 320, 391, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 439, 443, 459, 471, 473, 485, 512, 513, 531, 536, 584, 606, 632, 638, 645, 716, 731, 732, 741, 742, 743, 747, 749, 753, 754, 755, 757, 765, 766, 767, 768], "inference_s": 17, "256": [17, 407], "custom": [17, 117, 191, 214, 283, 418, 473, 541, 610, 732], "over": [17, 28, 37, 93, 117, 145, 160, 169, 191, 192, 214, 215, 216, 217, 218, 219, 221, 222, 223, 319, 320, 349, 418, 419, 420, 422, 426, 473, 528, 541, 551, 645, 732, 741, 751, 767], "The": [17, 38, 39, 40, 45, 50, 70, 95, 97, 109, 130, 158, 163, 165, 166, 191, 208, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 237, 257, 259, 267, 273, 274, 275, 276, 278, 280, 282, 283, 290, 307, 338, 364, 371, 374, 412, 418, 419, 420, 421, 422, 423, 425, 426, 427, 443, 476, 498, 501, 551, 565, 574, 575, 577, 578, 584, 585, 616, 619, 620, 626, 630, 641, 645, 650, 663, 664, 666, 667, 673, 674, 700, 703, 704, 710, 714, 725, 741, 747, 749, 751, 777, 782], "ar": [17, 24, 26, 29, 33, 38, 39, 50, 51, 56, 70, 86, 90, 97, 109, 114, 143, 144, 148, 149, 151, 172, 174, 175, 176, 178, 179, 180, 183, 208, 211, 212, 214, 220, 234, 236, 237, 242, 264, 268, 274, 275, 276, 280, 282, 283, 287, 290, 311, 314, 317, 319, 347, 348, 357, 358, 368, 370, 379, 382, 383, 384, 385, 386, 387, 391, 412, 416, 418, 424, 443, 449, 460, 468, 470, 474, 476, 480, 482, 511, 519, 525, 530, 532, 534, 535, 584, 610, 673, 741, 742, 749, 751, 753, 754, 763, 764, 766, 767, 770, 777, 779, 782], "implement": [17, 109, 117, 541, 645], "logic": [17, 117, 248, 272, 279, 292, 313, 462, 541, 645], "gener": [17, 72, 93, 117, 225, 230, 429, 439, 541, 610, 645, 749, 765, 766, 767, 768], "slower": [17, 60, 97, 107, 117, 533, 535, 541, 645], "more": [17, 37, 51, 56, 70, 72, 94, 107, 109, 117, 134, 135, 136, 183, 191, 225, 234, 250, 273, 287, 306, 320, 339, 340, 341, 391, 429, 443, 464, 525, 541, 645, 747, 761], "memori": [17, 28, 78, 109, 117, 209, 319, 413, 438, 480, 530, 533, 534, 535, 541, 551, 645, 741, 743, 747, 751, 753, 754, 755], "intens": [17, 117, 541, 645], "than": [17, 37, 50, 70, 72, 96, 117, 225, 234, 236, 273, 280, 429, 443, 511, 525, 533, 535, 541, 626, 630, 635, 641, 645, 710, 714, 719, 725, 741, 761], "same": [17, 94, 111, 116, 117, 157, 163, 214, 215, 216, 217, 218, 219, 221, 222, 223, 306, 315, 319, 320, 363, 418, 419, 420, 421, 422, 423, 425, 426, 427, 469, 470, 479, 541, 645, 763, 766], "becaus": [17, 26, 38, 51, 96, 117, 274, 320, 358, 541, 594, 645, 683], "python": [17, 71, 117, 191, 320, 459, 473, 500, 511, 541, 645, 656, 657, 658, 660, 741, 757], "an": [17, 18, 19, 26, 29, 33, 38, 39, 50, 60, 62, 68, 70, 85, 89, 96, 110, 113, 114, 117, 129, 131, 132, 134, 135, 136, 140, 141, 142, 143, 144, 145, 150, 161, 191, 192, 206, 214, 215, 216, 217, 218, 219, 221, 222, 223, 240, 244, 257, 258, 274, 275, 280, 283, 301, 311, 314, 333, 334, 335, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 355, 358, 418, 419, 420, 421, 422, 423, 425, 426, 427, 432, 433, 448, 460, 474, 478, 514, 515, 518, 521, 530, 541, 551, 587, 594, 596, 613, 619, 623, 638, 645, 676, 683, 685, 703, 707, 722, 731, 741, 742, 749, 751, 753, 756, 766, 767, 768, 779], "rust": [17, 105, 109, 117, 521, 541, 645, 743, 747], "materi": [17, 117, 290, 541, 645], "parallelis": [17, 117, 541, 645], "optimis": [17, 117, 541, 645], "possibl": [17, 117, 190, 252, 314, 541, 612, 635, 645, 719, 741], "best": [17, 117, 541, 645], "perform": [17, 38, 39, 50, 65, 109, 117, 274, 275, 280, 312, 518, 541, 565, 568, 570, 572, 574, 575, 578, 579, 580, 585, 586, 588, 645, 650, 653, 655, 661, 663, 664, 667, 668, 669, 674, 675, 677, 741, 743, 747, 751, 753, 754, 755], "lambda": [17, 24, 33, 117, 152, 153, 154, 191, 192, 214, 264, 283, 320, 359, 360, 361, 541, 610, 645, 751, 761], "oper": [17, 28, 33, 37, 44, 51, 60, 65, 85, 89, 90, 93, 96, 112, 140, 141, 142, 143, 144, 145, 208, 210, 267, 273, 276, 279, 282, 319, 345, 346, 347, 348, 349, 412, 414, 456, 459, 460, 468, 470, 471, 472, 480, 514, 518, 530, 531, 532, 533, 534, 535, 539, 551, 615], "given": [17, 26, 70, 76, 77, 151, 158, 188, 208, 211, 212, 215, 216, 218, 221, 222, 223, 228, 229, 249, 297, 298, 320, 357, 358, 364, 394, 412, 416, 419, 420, 422, 425, 426, 427, 436, 437, 463, 469, 471, 485, 583, 592, 605, 623, 638, 645, 672, 681, 694, 707, 741, 751, 765, 766, 767, 768], "tri": 17, "onli": [17, 24, 37, 50, 54, 80, 82, 112, 133, 134, 135, 136, 164, 210, 251, 259, 264, 276, 280, 282, 301, 336, 339, 340, 341, 369, 414, 456, 470, 480, 577, 666, 741, 742, 743, 747, 750, 751, 753, 754, 755, 760, 767, 768], "case": [17, 28, 38, 39, 191, 274, 275, 314, 319, 612, 613, 755, 772], "return": [17, 18, 22, 24, 25, 26, 27, 29, 30, 33, 41, 43, 49, 51, 52, 58, 60, 61, 62, 70, 72, 83, 84, 90, 93, 94, 101, 105, 107, 108, 114, 115, 118, 119, 120, 121, 122, 123, 126, 128, 137, 138, 157, 163, 167, 170, 172, 173, 174, 175, 176, 178, 179, 180, 186, 190, 197, 211, 212, 225, 232, 233, 243, 244, 245, 246, 247, 249, 251, 252, 253, 259, 265, 267, 276, 282, 283, 289, 290, 299, 305, 306, 313, 316, 317, 318, 320, 330, 350, 358, 363, 368, 370, 372, 373, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 393, 400, 416, 417, 429, 431, 433, 450, 452, 463, 465, 469, 473, 474, 475, 478, 479, 485, 510, 511, 512, 513, 519, 522, 525, 530, 531, 532, 533, 534, 535, 538, 539, 541, 544, 548, 554, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 596, 597, 598, 609, 613, 616, 618, 620, 622, 623, 624, 626, 630, 632, 633, 634, 635, 641, 646, 647, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 685, 686, 687, 698, 700, 701, 702, 704, 706, 707, 708, 709, 710, 714, 716, 717, 718, 719, 722, 725, 731, 732, 740, 741, 742, 743, 744, 747, 748, 751, 756, 762, 772], "first": [17, 41, 50, 52, 58, 62, 93, 94, 97, 126, 127, 128, 145, 167, 173, 186, 259, 276, 280, 282, 306, 314, 329, 332, 349, 350, 372, 380, 393, 476, 538, 544, 551, 577, 594, 596, 597, 622, 624, 628, 629, 646, 666, 683, 685, 686, 706, 708, 712, 713, 741, 742, 749, 751, 754], "determin": [17, 33, 38, 39, 93, 97, 211, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 443, 476, 480, 507, 532, 535, 563, 610, 612, 648, 741, 742, 747, 755], "foo": [17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 47, 49, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 98, 99, 100, 105, 113, 134, 163, 167, 168, 204, 212, 228, 229, 243, 245, 260, 264, 265, 270, 277, 278, 279, 295, 296, 307, 310, 339, 471, 474, 478, 537, 539, 551, 577, 592, 595, 596, 599, 600, 616, 618, 619, 620, 623, 627, 631, 633, 635, 637, 639, 640, 645, 666, 687, 702, 703, 704, 707, 709, 719, 731, 739, 756, 772], "bar": [17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 41, 43, 44, 45, 47, 49, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 95, 98, 99, 105, 113, 168, 234, 260, 264, 265, 270, 277, 278, 279, 295, 296, 307, 443, 471, 539, 551, 600, 619, 620, 633, 635, 645, 687, 703, 704, 719, 756, 772], "8": [17, 20, 21, 22, 23, 24, 25, 27, 31, 32, 34, 41, 43, 49, 53, 54, 55, 57, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 96, 98, 99, 102, 105, 116, 127, 139, 145, 148, 149, 169, 185, 202, 204, 205, 212, 213, 216, 217, 219, 221, 223, 235, 241, 245, 260, 264, 265, 266, 270, 279, 295, 296, 305, 310, 349, 407, 418, 497, 506, 508, 514, 593, 594, 626, 630, 638, 682, 683, 710, 714, 722, 757, 760, 761, 766, 767], "map": [17, 25, 66, 86, 192, 253, 265, 293, 473, 531, 532, 741, 743, 744, 747, 748, 751, 753], "each": [17, 50, 117, 163, 208, 280, 290, 337, 412, 473, 541, 542, 544, 554, 597, 609, 623, 634, 635, 645, 646, 647, 686, 698, 707, 718, 719, 754, 763, 764, 766], "t": [17, 96, 145, 151, 152, 153, 154, 349, 357, 359, 360, 361, 431, 468, 473, 480, 594, 638, 683, 722, 742, 751, 772], "column_0": [17, 93, 533, 535], "column_1": [17, 93, 533, 535], "15": [17, 38, 39, 44, 145, 275, 349], "24": [17, 26, 39, 143, 145, 275, 349, 512, 569], "It": [17, 117, 283, 314, 511, 541, 612, 645], "better": [17, 117, 253, 541, 645], "select": [17, 50, 54, 70, 79, 91, 95, 97, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 177, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 250, 251, 252, 253, 254, 260, 277, 280, 300, 307, 444, 451, 471, 473, 474, 475, 478, 481, 513, 526, 529, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 633, 634, 635, 637, 639, 640, 642, 643, 683, 706, 708, 740, 741, 743, 747, 749, 751, 752, 760, 761, 779], "scalar": [17, 226, 430], "9": [17, 33, 39, 41, 45, 83, 88, 96, 99, 101, 102, 105, 116, 127, 139, 144, 148, 149, 169, 174, 185, 202, 212, 214, 216, 222, 231, 235, 245, 275, 278, 309, 310, 363, 382, 418, 426, 428, 440, 481, 539, 553, 565, 578, 585, 586, 604, 607, 760], "14": [17, 94, 169, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 757], "follow": [17, 38, 39, 50, 97, 117, 163, 208, 215, 216, 217, 218, 219, 221, 222, 223, 273, 274, 275, 280, 412, 473, 577, 584, 666, 673, 741, 749, 751, 777, 782, 783], "creat": [18, 19, 38, 39, 59, 62, 97, 110, 129, 132, 150, 209, 240, 253, 257, 258, 261, 262, 274, 275, 314, 333, 335, 338, 342, 354, 355, 413, 448, 460, 474, 481, 485, 510, 511, 512, 513, 530, 533, 535, 584, 632, 673, 716, 766, 767, 768], "empti": [18, 19, 47, 56, 105, 257, 258, 287, 314, 338, 342, 378, 518, 742, 756], "copi": [18, 19, 85, 257, 258, 316, 338, 342, 354, 456, 460, 530, 641, 725], "current": [18, 19, 102, 203, 257, 258, 310, 338, 342, 407], "ident": [18, 19, 257, 258, 338, 342], "clone": [18, 89, 90, 257, 338, 459, 460, 468, 531, 532, 533, 534, 535], "cheap": [18, 19, 257, 258, 319, 338, 342], "deepcopi": [18, 19, 257, 258, 338, 342], "13": [18, 19, 29, 30, 36, 39, 44, 58, 94, 102, 214, 216, 257, 275, 310, 320, 481, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553], "true": [18, 19, 21, 24, 33, 34, 36, 38, 44, 46, 47, 48, 50, 54, 58, 60, 62, 63, 80, 86, 93, 94, 95, 96, 97, 102, 105, 112, 114, 115, 116, 117, 131, 140, 141, 142, 143, 144, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 210, 220, 225, 234, 236, 237, 244, 249, 250, 253, 257, 259, 261, 264, 267, 273, 274, 279, 280, 283, 290, 299, 306, 307, 310, 314, 317, 318, 319, 320, 330, 334, 338, 357, 359, 360, 361, 367, 370, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 408, 409, 414, 424, 431, 443, 445, 460, 463, 469, 474, 475, 479, 480, 530, 534, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 580, 592, 617, 619, 621, 624, 633, 634, 636, 638, 642, 643, 645, 669, 701, 703, 705, 708, 717, 718, 720, 722, 741, 742, 743, 747, 750, 751, 752, 753, 754, 755, 760, 763, 764, 765, 766, 767, 772], "bool": [18, 19, 31, 33, 34, 36, 37, 38, 43, 44, 46, 47, 48, 50, 54, 60, 62, 72, 78, 80, 86, 90, 93, 94, 95, 97, 99, 102, 105, 107, 109, 114, 115, 116, 126, 128, 131, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 158, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 208, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 234, 236, 237, 249, 250, 253, 257, 259, 261, 267, 270, 273, 274, 279, 280, 283, 290, 299, 301, 306, 307, 310, 313, 314, 317, 318, 319, 320, 329, 332, 334, 338, 345, 346, 347, 348, 349, 357, 359, 360, 361, 364, 365, 367, 368, 370, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 408, 409, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 438, 443, 445, 459, 460, 463, 464, 466, 468, 474, 475, 476, 479, 480, 530, 534, 543, 545, 547, 580, 592, 594, 607, 617, 619, 621, 628, 629, 633, 634, 636, 638, 642, 643, 669, 681, 683, 696, 701, 703, 705, 712, 713, 717, 718, 720, 722, 731, 741, 743, 745, 747, 750, 751, 752, 753, 754, 755, 760, 763, 764, 765, 766, 767, 768, 770, 772], "clear": [19, 258, 342], "properti": [20, 25, 42, 73, 75, 100, 129, 132, 150, 240, 260, 265, 295, 333, 335, 355, 356, 368, 373, 403, 435, 448, 455, 727, 779], "7": [20, 21, 22, 23, 25, 27, 31, 32, 34, 38, 39, 41, 43, 45, 49, 53, 54, 55, 57, 59, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 96, 97, 98, 99, 105, 144, 156, 167, 169, 202, 212, 216, 222, 243, 245, 260, 265, 266, 270, 275, 278, 279, 291, 295, 296, 305, 326, 426, 511, 565, 578, 586, 588, 760], "ham": [20, 22, 23, 24, 25, 31, 32, 34, 40, 41, 43, 49, 53, 54, 55, 57, 59, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 98, 99, 105, 260, 264, 265, 270, 279, 295, 296, 478], "appl": [20, 43, 49, 66, 68, 86, 205, 213, 241, 279, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 621, 636, 705, 720], "banana": [20, 86, 205, 213, 241, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553], "orang": [20, 470, 542, 543, 545, 546, 547, 549, 552, 553], "summari": [21, 350], "statist": [21, 109, 153, 154, 183, 215, 216, 217, 218, 219, 220, 221, 222, 223, 234, 350, 360, 361, 391, 424, 443, 741], "datetim": [21, 38, 39, 50, 97, 105, 110, 150, 170, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 280, 314, 355, 376, 396, 399, 404, 405, 433, 455, 462, 511, 513, 592, 638, 681, 722, 731, 736], "date": [21, 38, 39, 50, 90, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 280, 376, 396, 399, 404, 405, 433, 462, 490, 511, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 638, 650, 655, 656, 657, 658, 660, 663, 666, 667, 668, 671, 673, 674, 675, 677, 681, 722, 736, 741, 751, 752, 779], "d": [21, 40, 41, 44, 49, 52, 83, 85, 96, 99, 102, 105, 163, 279, 310, 470, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 567, 618, 623, 634, 638, 652, 702, 707, 718, 722, 752], "e": [21, 41, 52, 83, 85, 96, 102, 105, 151, 155, 163, 188, 227, 234, 310, 357, 431, 434, 443, 460, 470, 526, 741, 742, 743, 747, 753, 755], "usd": 21, "eur": [21, 765], "2020": [21, 39, 275, 566, 569, 571, 573, 576, 581], "2021": [21, 38, 97, 376, 638, 722, 731], "2022": [21, 511, 513, 638, 722, 757], "count": [21, 38, 39, 50, 59, 62, 93, 97, 103, 140, 185, 198, 201, 215, 216, 217, 218, 219, 221, 222, 223, 251, 253, 274, 275, 280, 312, 350, 402, 406, 465, 466, 541, 550, 577, 618, 666, 702, 737, 741, 743, 747, 751, 753, 754, 755], "null_count": [21, 24, 145, 349, 350], "mean": [21, 30, 62, 88, 109, 157, 160, 163, 216, 234, 269, 350, 363, 366, 370, 420, 443, 477, 536, 622, 706, 741, 751], "266667": 21, "null": [21, 24, 30, 33, 34, 45, 49, 54, 55, 59, 64, 76, 77, 80, 81, 82, 86, 95, 98, 105, 113, 116, 126, 128, 130, 134, 139, 146, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 176, 177, 178, 179, 180, 182, 185, 201, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 231, 236, 248, 255, 264, 269, 278, 279, 297, 298, 301, 307, 320, 329, 332, 339, 351, 354, 359, 360, 361, 364, 366, 370, 386, 387, 406, 407, 418, 419, 420, 421, 422, 423, 425, 426, 427, 431, 436, 437, 440, 460, 462, 471, 480, 481, 482, 526, 547, 566, 569, 571, 573, 576, 581, 593, 595, 596, 599, 605, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 630, 632, 634, 635, 636, 641, 682, 694, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 716, 718, 719, 720, 731, 741, 751, 760], "std": [21, 214, 350, 425], "101514": 21, "707107": [21, 153], "min": [21, 30, 38, 39, 62, 109, 134, 136, 142, 160, 208, 218, 269, 275, 339, 341, 346, 350, 366, 412, 422, 756, 767, 768], "01": [21, 38, 39, 97, 275, 511, 513, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 638, 673, 722], "max": [21, 30, 38, 39, 62, 109, 134, 135, 141, 160, 202, 208, 215, 269, 275, 339, 340, 345, 350, 366, 412, 419, 635, 644, 719, 767, 768], "median": [21, 62, 217, 421], "remov": [22, 155, 263, 526, 627, 631, 637, 711, 715, 721], "new": [22, 24, 43, 44, 59, 66, 67, 84, 96, 101, 113, 157, 163, 169, 192, 245, 293, 305, 316, 320, 354, 363, 415, 452, 469, 628, 629, 634, 635, 642, 643, 645, 712, 713, 718, 719, 726, 728], "": [22, 24, 26, 37, 38, 44, 49, 50, 67, 68, 84, 105, 155, 158, 183, 197, 199, 200, 202, 203, 210, 214, 237, 264, 273, 274, 280, 305, 314, 319, 320, 321, 322, 323, 324, 325, 326, 329, 334, 338, 339, 343, 344, 345, 346, 347, 348, 349, 352, 356, 358, 363, 364, 366, 367, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 402, 404, 405, 407, 408, 409, 411, 412, 415, 417, 418, 419, 420, 422, 426, 428, 429, 431, 436, 440, 441, 442, 444, 445, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 485, 513, 526, 529, 539, 567, 584, 593, 597, 598, 605, 606, 609, 613, 625, 626, 630, 632, 633, 635, 638, 641, 643, 644, 652, 673, 682, 686, 687, 689, 694, 695, 698, 701, 702, 703, 704, 705, 707, 709, 710, 712, 714, 716, 719, 720, 722, 725, 728, 733, 736, 738, 741, 761, 768], "drop": [23, 24, 94, 146, 148, 149, 264, 306, 351, 353, 593, 682], "place": [23, 43, 44, 67, 76, 77, 80, 99, 105, 126, 128, 228, 229, 297, 298, 301, 329, 332, 413, 415, 436, 437, 445, 598, 605, 687, 694], "subset": [24, 88, 94, 264, 306, 536], "union": [24, 25, 37, 53, 54, 56, 57, 66, 73, 74, 80, 82, 93, 97, 102, 117, 131, 155, 170, 174, 191, 235, 259, 264, 267, 283, 287, 295, 296, 299, 301, 310, 382, 471, 472, 473, 476, 478, 479, 480, 481, 482, 498, 509, 512, 513, 526, 531, 539, 584, 638, 644, 645, 722, 732, 733, 736, 756, 760, 761, 765, 766, 767, 768], "where": [24, 28, 56, 101, 151, 226, 234, 287, 319, 330, 357, 430, 443, 447, 467, 469, 475, 586, 675, 749, 772], "which": [24, 28, 80, 94, 104, 105, 106, 107, 108, 109, 114, 172, 175, 176, 178, 179, 180, 264, 306, 313, 319, 379, 383, 384, 385, 386, 387, 613, 741, 742, 749, 751], "appli": [24, 33, 61, 105, 153, 154, 191, 202, 214, 215, 216, 218, 222, 264, 276, 282, 283, 289, 360, 361, 418, 419, 420, 422, 426, 471, 475, 480, 528, 539, 732, 751, 765, 767, 768, 779], "wise": [24, 33, 118, 119, 120, 121, 122, 123, 137, 138, 156, 189, 231, 232, 233, 246, 247, 264, 321, 322, 323, 324, 325, 326, 343, 344, 362, 395, 440, 441, 442, 453, 454, 528], "singl": [24, 28, 35, 80, 161, 191, 209, 212, 255, 264, 301, 314, 319, 413, 416, 456, 478, 480, 539, 577, 616, 644, 666, 700, 732, 741, 749, 750, 751, 766], "snippet": [24, 264], "show": [24, 51, 59, 264, 299], "how": [24, 49, 96, 146, 169, 211, 264, 279, 314, 351, 470, 480, 532, 535, 563, 593, 619, 648, 682, 703, 749], "you": [24, 28, 50, 89, 93, 109, 134, 135, 136, 155, 161, 191, 210, 215, 216, 217, 218, 219, 221, 222, 223, 259, 264, 276, 280, 282, 299, 314, 319, 339, 340, 341, 414, 460, 468, 474, 531, 551, 594, 683, 741, 742, 751], "could": [24, 38, 131, 264, 274, 334, 507, 516, 528], "base": [24, 31, 38, 39, 151, 188, 189, 264, 270, 274, 275, 357, 394, 395, 469, 488, 551, 733, 736, 779], "condit": [24, 31, 70, 264, 270, 475, 621, 636], "filter": [24, 47, 255, 264, 267, 277, 432, 474, 541, 621, 636, 751, 752], "fold": [24, 264, 613, 761], "acc": [24, 264, 528], "is_nul": [24, 264], "expr": [24, 27, 29, 31, 37, 38, 39, 49, 62, 70, 74, 80, 101, 102, 264, 266, 268, 270, 273, 274, 275, 279, 296, 298, 301, 309, 310, 349, 365, 437, 451, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 510, 512, 513, 514, 526, 527, 528, 529, 537, 538, 539, 644, 683, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 750, 756, 758, 759, 760, 761, 762, 771, 772, 777], "also": [25, 37, 38, 39, 80, 155, 169, 208, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 311, 412, 511, 528, 767, 768, 777], "found": [25, 105, 520, 624, 638, 643, 708], "header": [25, 62, 93, 105, 109, 741, 742, 751], "colnam": [25, 192, 265, 767], "float64": [25, 26, 33, 73, 105, 118, 119, 120, 121, 122, 123, 131, 137, 138, 155, 232, 233, 246, 247, 265, 295, 526, 580, 669, 767], "unit": [26, 190, 252, 290, 314, 358, 455, 490, 491, 511, 564, 567, 583, 587, 613, 649, 652, 672, 676, 767, 768], "sizeunit": [26, 358], "float": [26, 29, 50, 64, 72, 77, 133, 134, 135, 136, 148, 149, 151, 152, 153, 154, 158, 159, 164, 169, 176, 178, 179, 180, 188, 204, 207, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 268, 280, 291, 298, 299, 334, 336, 339, 340, 341, 352, 357, 358, 359, 360, 361, 364, 365, 369, 381, 391, 394, 396, 397, 398, 399, 404, 405, 410, 411, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 433, 443, 447, 449, 467, 477, 485, 492, 493, 552, 580, 592, 669, 681, 733, 734, 735, 736, 739, 750, 752, 759, 761, 763, 764, 765, 767, 768, 771], "estim": [26, 153, 154, 183, 358, 360, 361, 391, 741], "total": [26, 358], "heap": [26, 358], "alloc": [26, 65, 358, 741], "size": [26, 38, 96, 109, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 358, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 474, 741, 766, 767, 768, 769], "byte": [26, 105, 358, 741, 742, 743, 744, 747, 748, 751], "sum": [26, 33, 37, 39, 62, 117, 143, 144, 151, 161, 202, 215, 216, 218, 221, 222, 223, 255, 273, 275, 347, 348, 357, 358, 419, 420, 422, 425, 426, 427, 471, 528, 539, 645, 736], "its": [26, 95, 307, 358], "buffer": [26, 358, 741], "includ": [26, 38, 93, 96, 105, 170, 358, 468, 580, 633, 634, 669, 717, 718, 767], "nest": [26, 358, 470, 498, 779], "multipl": [26, 28, 31, 38, 43, 60, 62, 80, 102, 155, 197, 212, 215, 216, 217, 218, 219, 221, 222, 223, 237, 263, 270, 274, 301, 310, 311, 319, 358, 400, 416, 476, 479, 480, 526, 528, 539, 613, 644, 732, 741, 751, 753, 755, 766, 768, 772], "share": [26, 358, 470], "bitmap": [26, 358], "therefor": [26, 358], "comput": [26, 50, 94, 109, 111, 118, 119, 120, 121, 122, 123, 137, 138, 140, 141, 142, 143, 144, 147, 151, 156, 183, 188, 189, 197, 203, 206, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 232, 233, 234, 238, 246, 247, 277, 279, 280, 306, 311, 315, 321, 322, 323, 324, 325, 326, 343, 344, 345, 346, 347, 348, 352, 357, 358, 362, 391, 394, 395, 400, 407, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 440, 441, 442, 443, 446, 453, 454, 479, 480, 484, 514, 516, 552, 601, 602, 603, 690, 691, 692, 738, 758, 779, 781], "particular": [26, 358, 741, 743, 747, 753, 755], "structarrai": [26, 358], "upper": [26, 38, 170, 252, 274, 358, 474, 511, 741], "bound": [26, 38, 170, 190, 252, 274, 358, 474, 511, 596, 685, 741], "slice": [26, 214, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 283, 290, 299, 358, 418, 419, 420, 421, 422, 423, 425, 426, 427, 479, 597, 609, 686, 698], "remain": [26, 37, 117, 273, 283, 358, 634, 635, 718, 719, 741, 751], "constant": [26, 39, 275, 358], "unchang": [26, 117, 248, 283, 358, 462, 645], "howev": [26, 358], "smaller": [26, 109, 267, 358], "visibl": [26, 358], "capac": [26, 78, 358, 438], "ffi": [26, 358], "kb": [26, 358], "mb": [26, 358], "gb": [26, 358], "tb": [26, 358], "scale": [26, 358], "x": [26, 43, 46, 48, 49, 56, 117, 166, 191, 211, 234, 248, 279, 287, 300, 316, 320, 366, 390, 443, 462, 591, 598, 634, 645, 718, 741, 751, 761, 766, 767], "revers": [26, 80, 126, 128, 140, 141, 142, 143, 144, 192, 205, 208, 227, 236, 237, 241, 249, 301, 329, 332, 345, 346, 347, 348, 412, 434, 445, 463, 476, 607, 696], "1_000_000": [26, 358], "y": [26, 46, 48, 49, 56, 211, 279, 287, 300, 316, 591, 598, 638, 722, 761, 766, 767], "v": [26, 109, 226, 430, 485], "1000": [26, 512, 641, 742], "z": [26, 46, 48, 49, 56, 166, 211, 279, 287, 300, 366, 563, 591, 648, 766, 767], "uint32": [26, 126, 128, 211, 244, 248, 330, 334, 358, 431, 462, 509, 565, 568, 572, 574, 575, 578, 579, 580, 585, 586, 589, 590, 600, 618, 625, 650, 653, 661, 663, 664, 667, 668, 669, 674, 675, 678, 679, 689, 702, 757], "25888898": 26, "689577102661133": 26, "long": [27, 56, 96, 266, 287], "largelist": 27, "letter": [27, 155, 240, 266, 526, 544, 554, 646, 647], "differ": [28, 38, 39, 93, 146, 199, 200, 251, 274, 275, 319, 351, 404, 405, 431, 527, 565, 577, 578, 585, 593, 638, 650, 666, 667, 674, 682, 722, 733, 736, 741], "vstack": [28, 480], "add": [28, 38, 102, 103, 205, 241, 274, 279, 309, 310, 311, 312, 319, 513, 772], "chunk": [28, 58, 109, 116, 209, 319, 337, 401, 413, 456, 741, 751, 753, 754, 755], "append": [28, 49, 50, 209, 279, 280, 767], "underli": [28, 85, 210, 224, 314, 319, 414, 428, 438, 455, 456, 460, 515, 521, 564, 565, 568, 570, 572, 574, 575, 578, 579, 580, 585, 586, 587, 588, 649, 650, 653, 655, 661, 663, 664, 667, 668, 669, 674, 675, 676, 677, 747, 767, 768], "locat": [28, 68, 91, 95, 307, 319, 433, 451], "thu": [28, 319, 751], "caus": [28, 319, 521, 741, 751], "realloc": [28, 319, 751, 753, 754], "have": [28, 65, 145, 152, 153, 154, 208, 299, 312, 319, 349, 359, 360, 361, 370, 412, 551, 613, 741, 742, 763, 770], "extra": [28, 60, 109, 319, 741, 742, 743, 747, 753, 755], "faster": [28, 96, 214, 251, 319, 320, 418], "queri": [28, 51, 259, 261, 262, 267, 276, 282, 290, 299, 312, 319, 624, 645, 708, 743, 749, 751, 753, 754, 755, 781], "prefer": [28, 214, 319, 418, 432, 433], "want": [28, 109, 134, 135, 136, 161, 191, 215, 216, 217, 218, 219, 221, 222, 223, 259, 276, 282, 319, 339, 340, 341, 460], "do": [28, 50, 85, 93, 96, 145, 259, 280, 283, 290, 299, 319, 349, 460, 468, 471, 479, 551, 594, 683, 751], "after": [28, 95, 208, 307, 319, 412, 641, 725, 740, 741, 743, 747, 751, 753, 754, 755], "instanc": [28, 33, 131, 215, 216, 217, 218, 219, 221, 222, 223, 283, 312, 319, 334, 528, 613, 741, 751, 767, 768], "dure": [28, 319, 741, 751], "onlin": [28, 319], "rerun": [28, 319], "mani": [28, 319, 532, 535, 749], "time": [28, 38, 39, 50, 97, 248, 249, 259, 274, 275, 280, 290, 314, 319, 455, 462, 463, 479, 481, 482, 490, 491, 510, 511, 512, 513, 564, 567, 577, 583, 587, 591, 592, 638, 649, 652, 666, 672, 676, 680, 722, 750, 751, 779], "read": [28, 191, 267, 272, 292, 319, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 755], "file": [28, 104, 105, 106, 107, 108, 109, 267, 292, 313, 319, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 753, 754, 755], "store": [28, 319], "them": [28, 38, 39, 50, 97, 199, 200, 274, 275, 280, 319, 404, 405, 481, 598, 687], "latter": [28, 319], "finish": [28, 319, 470, 516], "rechunk": [28, 319, 480, 530, 534, 741, 743, 751, 753, 754, 755], "vertic": [28, 96, 99, 480, 616, 700, 733], "df1": [28, 34, 99, 470, 480, 763], "20": [28, 43, 44, 61, 63, 67, 68, 124, 125, 126, 128, 146, 166, 169, 289, 584, 673, 731, 767, 768], "30": [28, 38, 43, 61, 67, 68, 86, 102, 124, 125, 126, 128, 146, 166, 289, 310, 485, 566, 579, 584, 588, 673], "40": [28, 61, 166, 289], "50": [28, 134, 339, 532, 535], "60": [28, 512, 580, 581, 638, 669, 722], "fill_valu": [29, 77, 96, 159, 229, 268, 298, 365, 437], "fill": [29, 30, 77, 96, 130, 158, 159, 160, 165, 169, 215, 216, 218, 221, 222, 223, 229, 268, 269, 298, 364, 365, 366, 419, 420, 422, 425, 426, 427, 437, 480, 529, 626, 630, 641, 710, 714, 725], "point": [29, 51, 72, 133, 148, 149, 159, 164, 224, 225, 268, 283, 336, 365, 369, 381, 428, 429, 492, 493, 580, 669], "nan": [29, 148, 149, 159, 169, 176, 178, 179, 180, 199, 200, 268, 314, 322, 326, 353, 365, 384, 385, 404, 405, 418, 534, 763, 764, 767], "evalu": [29, 31, 50, 54, 102, 145, 168, 170, 174, 270, 277, 279, 280, 309, 310, 330, 349, 469, 472, 474, 475, 514, 760], "replac": [29, 30, 68, 93, 101, 268, 309, 432, 433, 619, 629, 703, 713, 741, 751], "Not": [29, 268], "miss": [29, 130, 165, 169, 268, 468, 480], "To": [29, 148, 149, 160, 268, 761], "fill_nul": [29, 268, 638, 722], "strategi": [30, 49, 50, 58, 160, 269, 279, 280, 366, 610, 741, 765, 766, 767, 768], "fillnullstrategi": [30, 160, 269, 366], "limit": [30, 130, 134, 135, 136, 160, 165, 269, 276, 339, 340, 341, 366, 751], "forward": [30, 50, 160, 165, 269, 280, 366], "backward": [30, 50, 130, 160, 269, 280, 366], "zero": [30, 70, 85, 159, 160, 234, 269, 366, 443, 456, 460, 530, 641, 725, 740, 741, 743, 747], "one": [30, 31, 38, 39, 56, 62, 70, 88, 92, 112, 160, 214, 236, 237, 244, 263, 269, 270, 274, 275, 287, 311, 319, 366, 418, 471, 519, 539, 540, 551, 642, 726, 760, 761], "consecut": [30, 130, 160, 165, 269, 366, 616, 700], "fill_nan": 30, "predic": [31, 70, 161, 255, 259, 267, 270, 283, 290, 299, 312, 367, 432, 433, 479, 751, 753, 754, 755, 772], "boolean": [31, 33, 54, 102, 114, 115, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 255, 270, 310, 317, 318, 330, 367, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 408, 409, 432, 469, 475, 592, 681, 701, 779], "find": [32, 226, 430, 476, 480], "index": [32, 38, 39, 44, 50, 62, 68, 70, 79, 91, 97, 103, 112, 124, 125, 126, 127, 128, 215, 216, 217, 218, 219, 221, 222, 223, 235, 244, 274, 275, 280, 300, 312, 327, 328, 329, 330, 331, 332, 433, 444, 451, 476, 509, 577, 589, 590, 596, 606, 622, 632, 666, 678, 679, 685, 695, 706, 716, 757], "horizont": [33, 43, 96, 480, 482, 514, 528, 733, 736, 761], "reduct": 33, "effect": [33, 109, 312], "aggreg": [33, 37, 38, 53, 54, 55, 57, 62, 63, 64, 81, 82, 96, 98, 112, 161, 182, 187, 191, 202, 214, 215, 216, 217, 218, 219, 221, 222, 223, 253, 283, 284, 285, 286, 288, 291, 302, 303, 308, 418, 419, 420, 422, 425, 426, 427, 480, 528, 539, 540, 543, 545, 551, 644, 730, 733, 736, 741, 761, 779], "level": [33, 109, 161, 276, 282, 751, 753, 754, 755], "supercast": 33, "cast": [33, 38, 39, 54, 61, 90, 116, 132, 143, 144, 210, 242, 248, 274, 275, 289, 347, 348, 414, 449, 458, 462, 482, 530, 563, 564, 624, 641, 648, 649, 708, 770], "similar": [33, 50, 202, 280], "parent": 33, "rule": [33, 582, 671], "arithmet": 33, "int8": [33, 143, 144, 242, 347, 348, 417, 449], "take": [33, 84, 245, 305, 452, 469, 514, 527, 577, 666, 767], "A": [33, 38, 50, 60, 62, 86, 88, 96, 97, 105, 111, 172, 175, 182, 191, 192, 205, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 240, 241, 274, 280, 301, 314, 418, 419, 420, 422, 425, 426, 427, 478, 479, 481, 487, 511, 514, 529, 536, 551, 566, 569, 571, 573, 576, 581, 610, 613, 617, 618, 622, 623, 624, 641, 651, 654, 659, 662, 665, 670, 701, 702, 706, 707, 708, 712, 713, 722, 725, 741, 751, 777], "s1": [33, 469, 764], "s2": [33, 314, 319, 352, 382, 431, 469, 764], "minimum": [33, 57, 134, 136, 152, 153, 154, 196, 200, 208, 288, 339, 341, 359, 360, 361, 405, 409, 412, 660, 736, 766, 767, 768], "zip_with": 33, "concaten": [33, 480], "foo11": 33, "bar22": 33, "null_equ": [34, 431], "check": [34, 47, 114, 115, 170, 174, 283, 317, 318, 375, 376, 378, 381, 382, 388, 390, 431, 592, 617, 621, 636, 681, 701, 705, 720, 741, 751, 763, 764], "equal": [34, 38, 50, 214, 215, 216, 217, 218, 219, 221, 222, 223, 274, 280, 418, 419, 420, 421, 422, 423, 425, 426, 427, 431, 474, 626, 630, 641, 710, 714, 725, 741, 751, 763, 764, 770], "compar": [34, 94, 306, 431, 763, 764], "consid": [34, 56, 96, 102, 109, 134, 135, 136, 145, 215, 216, 217, 218, 219, 221, 222, 223, 236, 276, 282, 287, 310, 314, 339, 340, 341, 349, 431, 433, 485, 539, 551, 673, 752], "retriev": [35, 589, 590, 642, 678, 679, 726], "maintain_ord": [37, 60, 62, 94, 97, 112, 117, 244, 250, 273, 306, 464, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 645], "start": [37, 38, 51, 79, 97, 103, 155, 170, 235, 273, 300, 312, 444, 478, 526, 528, 565, 567, 568, 572, 574, 578, 579, 583, 584, 585, 586, 588, 606, 617, 621, 632, 636, 650, 663, 667, 673, 674, 695, 705, 716, 720, 740, 741, 743, 747, 751, 753, 754, 755, 772], "group": [37, 38, 39, 60, 62, 96, 97, 109, 112, 117, 202, 236, 237, 244, 273, 274, 275, 473, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 594, 622, 644, 645, 646, 647, 683, 706], "make": [37, 38, 39, 65, 97, 153, 154, 211, 273, 274, 275, 360, 361, 480, 501, 530, 534, 634, 641, 718, 725, 741, 743, 747, 749, 753, 755], "sure": [37, 65, 273, 474, 480, 530, 534, 741, 743, 749], "consist": [37, 273], "expens": [37, 93, 273, 319, 741, 747, 751, 754, 755], "work": [37, 39, 67, 94, 133, 134, 135, 136, 164, 250, 273, 275, 306, 336, 339, 340, 341, 369, 464, 594, 643, 683, 742], "we": [37, 50, 80, 182, 280, 283, 320, 594, 683, 731, 741, 742, 751, 772], "agg": [37, 38, 39, 112, 117, 161, 182, 236, 244, 255, 273, 275, 645], "sort": [37, 38, 39, 50, 60, 62, 97, 126, 128, 161, 182, 227, 237, 253, 255, 274, 275, 280, 329, 332, 434, 464, 466, 476, 539, 544, 554, 563, 646, 647, 648], "11": [37, 39, 109, 148, 149, 169, 203, 222, 235, 273, 275, 320, 418, 478, 577, 641, 761], "loop": 37, "sub_df": 37, "index_column": [38, 39, 274, 275], "everi": [38, 84, 87, 97, 140, 141, 142, 143, 144, 145, 157, 163, 245, 267, 274, 305, 345, 346, 347, 348, 349, 363, 452, 584, 589, 590, 593, 596, 597, 606, 609, 673, 678, 679, 682, 685, 686, 695, 698, 741, 751], "period": [38, 39, 76, 77, 97, 152, 153, 154, 203, 228, 229, 274, 275, 297, 298, 359, 360, 361, 407, 436, 437, 511, 584, 605, 673, 694], "offset": [38, 39, 79, 97, 103, 235, 274, 275, 300, 312, 444, 577, 584, 606, 632, 666, 673, 695, 716, 741, 743, 747, 751, 753, 754, 755], "truncat": [38, 274], "include_boundari": [38, 274], "close": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 443, 511], "closedwindow": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 511], "dynamicgroupbi": 38, "int32": [38, 39, 131, 248, 274, 275, 462, 570, 588, 655, 677, 767, 768], "window": [38, 39, 145, 152, 153, 154, 202, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 275, 349, 359, 360, 361, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 481, 511, 584, 673, 779], "calcul": [38, 146, 152, 153, 154, 183, 190, 220, 234, 252, 274, 351, 359, 360, 361, 391, 424, 443, 447, 467, 593, 682], "assign": [38, 208, 274, 412, 485, 634, 635, 718, 719, 766], "normal": [38, 151, 183, 234, 274, 357, 391, 443], "groupbi": [38, 39, 112, 117, 145, 161, 182, 202, 236, 237, 244, 255, 274, 275, 349, 473, 594, 683, 779], "member": [38, 274, 382], "seen": [38, 130, 165, 274], "roll": [38, 39, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 275, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 481], "instead": [38, 54, 60, 105, 107, 108, 126, 128, 268, 273, 274, 313, 329, 332, 474, 747, 761, 767], "slot": [38, 145, 146, 274, 349, 351, 593, 682], "defin": [38, 39, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 490, 511, 731, 765, 766, 767], "interv": [38, 39, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 511, 580, 584, 673], "length": [38, 39, 79, 145, 214, 215, 216, 217, 218, 219, 221, 222, 223, 235, 274, 275, 300, 337, 349, 392, 418, 419, 420, 421, 422, 423, 425, 426, 427, 444, 480, 485, 584, 606, 613, 626, 630, 632, 641, 673, 695, 710, 714, 716, 725, 754, 766], "argument": [38, 39, 54, 61, 62, 82, 90, 97, 107, 109, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 274, 275, 289, 313, 314, 479, 584, 673, 741, 745, 747], "languag": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 584, 666, 673, 751], "1n": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 584, 666, 673], "nanosecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 513, 577, 580, 584, 666, 669, 673], "1u": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 584, 666, 673], "microsecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 290, 577, 580, 584, 666, 673], "1m": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 571, 576, 577, 581, 584, 666, 673], "millisecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 512, 513, 577, 584, 666, 673], "second": [38, 39, 50, 97, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 476, 511, 512, 513, 575, 577, 584, 638, 664, 666, 673], "minut": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 511, 512, 513, 577, 584, 666, 673], "1h": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 584, 666, 673], "hour": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 511, 512, 513, 577, 584, 666, 673], "1d": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 511, 564, 569, 573, 577, 584, 587, 666, 673], "dai": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 502, 510, 511, 512, 513, 567, 574, 577, 578, 579, 583, 584, 585, 586, 588, 666, 667, 673, 675], "1w": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 584, 666, 673], "week": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 513, 577, 584, 586, 666, 673, 675], "1mo": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 511, 566, 577, 584, 666, 673], "calendar": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 489, 490, 570, 577, 584, 588, 655, 666, 673, 677], "month": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 510, 512, 565, 577, 584, 650, 666, 673], "1y": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 584, 666, 673], "year": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 510, 512, 570, 577, 578, 584, 585, 655, 666, 667, 673, 674], "1i": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 666], "combin": [38, 39, 40, 50, 97, 274, 275, 280, 299, 523, 524, 539], "3d12h4m25": [38, 39, 50, 97, 274, 275, 280, 511, 584, 673], "12": [38, 39, 50, 97, 143, 203, 274, 275, 280, 299, 320, 428, 485, 510, 511, 512, 568, 574, 579, 584, 588, 663, 673], "25": [38, 39, 50, 97, 101, 102, 274, 275, 280, 285, 308, 309, 310, 357, 407, 511, 584, 588, 673], "integ": [38, 39, 133, 164, 210, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 336, 369, 414, 433, 494, 495, 496, 497, 503, 504, 505, 506, 580, 669, 731, 766, 767], "10i": [38, 39, 274, 275], "often": [38, 39, 182, 211, 274, 275], "ascend": [38, 39, 274, 275, 476], "sens": [38, 39, 97, 274, 275, 741, 743, 747, 753, 755], "dynam": [38, 215, 216, 217, 218, 219, 221, 222, 223, 274], "indic": [38, 39, 172, 175, 176, 178, 179, 180, 215, 216, 217, 218, 219, 221, 222, 223, 226, 231, 244, 274, 275, 314, 379, 383, 384, 385, 386, 387, 430, 440, 451, 475, 536, 740, 741, 743, 747, 751, 765, 766, 768], "need": [38, 39, 78, 89, 274, 275, 460, 644, 741, 742, 763, 764], "temporarili": [38, 39, 274, 275, 470], "so": [38, 39, 62, 274, 275, 470, 476, 596, 685, 751], "matter": [38, 39, 274, 275], "neg": [38, 76, 77, 79, 228, 229, 235, 274, 297, 298, 300, 312, 436, 437, 444, 605, 606, 632, 694, 695, 716], "lower": [38, 64, 170, 190, 207, 210, 219, 267, 274, 291, 411, 414, 423, 474, 511, 552, 739, 751], "_lower_bound": [38, 274], "_upper_bound": [38, 274], "impact": [38, 274], "harder": [38, 274], "parallel": [38, 50, 51, 145, 274, 279, 280, 349, 479, 480, 594, 683, 747, 749, 755, 779], "both": [38, 39, 49, 50, 70, 105, 116, 170, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 279, 280, 470, 511, 627, 631, 637], "tempor": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 511], "date_rang": [38, 97, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 673], "low": [38, 474, 511, 580], "16": [38, 39, 101, 102, 169, 216, 275, 299, 309, 310, 407, 441, 453, 494, 503, 513, 514, 757], "high": [38, 474, 511, 580], "30m": 38, "\u03bc": [38, 39, 50, 97, 275, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 673], "00": [38, 50, 97, 511, 513, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 638, 673, 722], "02": [38, 39, 97, 224, 275, 511, 513, 564, 567, 568, 569, 572, 573, 574, 581, 583, 584, 585, 587, 673], "03": [38, 39, 97, 275, 511, 564, 566, 567, 569, 573, 574, 580, 581, 583, 584, 585, 587, 673], "alia": [38, 39, 52, 95, 101, 102, 117, 128, 134, 140, 141, 142, 143, 144, 161, 163, 168, 173, 174, 185, 186, 202, 203, 210, 248, 255, 275, 277, 282, 307, 309, 310, 332, 393, 477, 481, 482, 513, 514, 529, 564, 565, 566, 567, 569, 571, 573, 576, 577, 578, 580, 581, 583, 586, 587, 594, 615, 617, 618, 621, 623, 625, 632, 634, 635, 636, 644, 683, 718, 719, 750, 760, 761], "time_min": 38, "time_max": 38, "boundari": [38, 134, 135, 136, 339, 340, 341], "ad": [38, 93, 101, 116, 309], "time_count": 38, "_lower_boundari": 38, "_upper_boundari": 38, "u32": [38, 59, 103, 112, 124, 125, 126, 127, 128, 139, 140, 185, 198, 201, 208, 248, 251, 312, 329, 334, 412, 462, 465, 466, 475, 542, 546, 549, 550, 553, 565, 568, 572, 574, 578, 579, 580, 585, 586, 589, 590, 600, 618, 625, 689, 702, 709], "23": [38, 39, 275, 568, 584, 653, 673, 757], "should": [38, 50, 104, 105, 106, 107, 108, 109, 112, 145, 214, 215, 216, 217, 218, 219, 221, 222, 223, 226, 234, 263, 279, 280, 283, 299, 313, 320, 349, 418, 419, 420, 421, 422, 423, 425, 426, 427, 430, 443, 563, 587, 594, 648, 676, 683, 731, 765, 766, 768], "end": [38, 155, 170, 276, 282, 478, 526, 606, 617, 621, 632, 636, 695, 705, 716, 720, 741, 751], "lower_bound": 38, "upper_bound": 38, "time_agg_list": 38, "belong": 38, "04": [38, 97, 511, 513, 565, 566, 569, 572, 573, 574, 578, 581, 584, 585, 586, 587, 638, 673, 722, 752], "idx": [38, 433, 610], "arang": [38, 96, 541], "2i": 38, "3i": 38, "a_agg_list": 38, "rollinggroupbi": 39, "dynamic_groupbi": [39, 275], "now": [39, 275], "individu": [39, 117, 129, 132, 240, 275, 337, 623, 707], "groupby_dynam": [39, 275], "45": [39, 275, 618, 623, 702, 707], "48": [39, 275], "42": [39, 40, 275, 371], "09": [39, 275], "18": [39, 169, 275, 584, 587, 673], "19": [39, 50, 275, 584, 673], "32": [39, 275, 352, 407, 492, 495, 504, 757], "08": [39, 275, 511, 513, 638, 722, 763, 764], "43": [39, 275], "dt": [39, 110, 275, 314, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 673, 777, 782], "with_column": [39, 61, 117, 131, 134, 166, 169, 170, 173, 176, 178, 179, 180, 202, 203, 248, 275, 289, 474, 481, 482, 514, 563, 594, 621, 628, 629, 632, 634, 635, 636, 638, 641, 643, 648, 683, 722, 760, 761, 772], "strptime": [39, 275, 582, 671], "out": [39, 172, 175, 275, 596, 685, 752, 757], "2d": [39, 89, 275], "sum_a": [39, 275], "min_a": [39, 275], "max_a": [39, 275], "assert": [39, 275, 370, 584, 673, 763, 764, 766, 767, 768, 779], "to_list": [39, 275, 610], "seed": [40, 72, 166, 225, 230, 371, 429, 439], "seed_1": [40, 166, 371], "seed_2": [40, 166, 371], "seed_3": [40, 166, 371], "hash": 40, "uint64": [40, 166, 210, 371, 414, 509, 589, 590, 678, 679], "random": [40, 72, 166, 208, 225, 230, 371, 412, 429, 439, 766, 767], "u64": [40, 166, 210, 371], "1381515935931787907": 40, "14326417405130769253": 40, "12561864296213327929": 40, "11391467306893437193": 40, "frame": [43, 90, 96, 105, 277, 290, 458, 479, 742, 763, 767], "in_plac": [43, 78, 99, 413, 415, 438, 445], "grown": 43, "stack": [43, 99, 480], "modifi": [43, 99, 415, 587, 676, 723, 724, 741, 751], "insert": [44, 67, 93, 95, 226, 307, 430, 616, 641, 700, 725, 741, 743, 747, 751, 753, 754, 755], "certain": [44, 97, 155, 259, 290, 314, 526], "baz": [44, 45, 62, 95, 278, 307, 551, 633, 635, 719], "intermedi": [45, 278, 374], "linear": [45, 64, 169, 195, 207, 219, 278, 291, 374, 411, 423, 481, 482, 552, 591, 680, 739], "mask": [46, 48, 171, 173, 181, 367, 377, 380, 389, 408, 409, 432, 469, 592, 681, 701], "duplic": [46, 49, 50, 94, 171, 279, 280, 306, 377, 476, 517], "uniqu": [48, 127, 173, 181, 198, 251, 253, 331, 350, 380, 389, 402, 465, 466, 550, 737, 765, 766, 768], "left_on": [49, 50, 279, 280], "right_on": [49, 50, 279, 280], "joinstrategi": [49, 279], "inner": [49, 147, 279, 314, 352, 373, 470, 498, 598, 687], "suffix": [49, 50, 176, 178, 179, 180, 213, 279, 280, 539, 621, 705], "_right": [49, 50, 279, 280], "sql": [49, 749, 779], "like": [49, 208, 267, 292, 412, 511, 551, 594, 615, 683, 740, 741, 742, 743, 744, 745, 746, 747, 748], "fashion": 49, "outer": [49, 279], "semi": [49, 279], "anti": [49, 279, 314, 432, 433], "cross": [49, 279], "join_asof": [49, 279], "categor": [49, 110, 132, 248, 314, 335, 462, 470, 536, 770], "see": [49, 129, 132, 134, 135, 136, 160, 169, 183, 191, 234, 240, 339, 340, 341, 391, 443, 582, 671, 742, 749, 763, 764, 767, 768, 783], "stringcach": [49, 779], "other_df": [49, 279], "by_left": [50, 280], "by_right": [50, 280], "asofjoinstrategi": [50, 280], "toler": [50, 280, 763, 764], "allow_parallel": [50, 279, 280], "force_parallel": [50, 279, 280], "asof": [50, 280], "join": [50, 169, 202, 259, 267, 280, 299, 470, 479], "nearest": [50, 64, 133, 164, 207, 219, 280, 291, 336, 369, 411, 423, 552, 739], "rather": [50, 280, 641, 725], "asof_join": 50, "search": [50, 280], "last": [50, 62, 80, 83, 94, 126, 128, 145, 243, 280, 301, 304, 306, 329, 332, 349, 450, 554, 565, 578, 585, 596, 609, 635, 647, 650, 667, 674, 685, 698, 719, 762], "whose": [50, 62, 155, 280, 526], "less": [50, 280, 626, 630, 635, 641, 710, 714, 719, 725, 751], "greater": [50, 234, 280, 443, 635, 719], "numer": [50, 54, 134, 135, 136, 211, 280, 314, 339, 340, 341, 388, 431, 779], "By": [50, 80, 280, 447, 460, 467, 731, 741, 742], "done": [50, 116, 131, 280, 301, 334, 626, 630, 644, 710, 714, 741, 751], "within": [50, 280, 498, 763, 764], "distanc": [50, 280], "durat": [50, 97, 248, 280, 462, 511, 566, 569, 571, 573, 576, 581, 587, 651, 654, 659, 662, 665, 670, 676], "allow": [50, 51, 72, 210, 225, 279, 280, 283, 311, 414, 429, 431, 470, 577, 638, 666, 722, 751, 753, 754, 755, 767, 768], "physic": [50, 132, 248, 256, 279, 280, 462, 563, 648, 741], "plan": [50, 51, 256, 261, 262, 272, 279, 280, 292, 299, 313], "up": [50, 133, 279, 280, 283, 336, 501, 641, 725], "forc": [50, 279, 280], "gdp": 50, "2016": 50, "2017": 50, "2018": 50, "2019": 50, "record": 50, "jan": 50, "1st": 50, "4164": 50, "4411": 50, "4566": 50, "4696": 50, "popul": 50, "12th": 50, "82": 50, "66": 50, "83": 50, "52": [50, 102, 224, 310], "05": [50, 97, 511, 566, 580, 584, 673, 752, 763, 764], "object": [51, 90, 109, 110, 129, 132, 150, 240, 273, 277, 292, 314, 333, 335, 355, 448, 456, 511, 531, 731, 740, 741, 742, 743, 744, 745, 746, 747, 748, 753, 755, 766, 767, 768, 779], "execut": [51, 256, 290, 480, 594, 683], "until": [51, 470], "request": 51, "either": [51, 54, 70, 82, 767], "call": [51, 320, 767, 768, 774, 781], "fetch": [51, 257, 259, 276, 282, 307, 751], "run": [51, 145, 259, 267, 290, 299, 349, 479, 490, 594, 683, 750, 756], "small": [51, 236, 237, 267], "describe_plan": 51, "unoptim": [51, 262], "describe_optimized_plan": 51, "optim": [51, 65, 259, 261, 267, 283, 290, 299, 312, 479, 747, 751, 753, 754, 755], "show_graph": 51, "un": 51, "graphviz": [51, 299], "graph": [51, 277, 311, 479, 781], "advis": 51, "thei": [51, 155, 214, 418], "head": [52, 116, 186, 282, 393], "axi": [53, 54, 56, 57, 82, 287], "maximum": [53, 105, 134, 135, 193, 199, 208, 284, 339, 340, 396, 404, 408, 412, 589, 656, 678, 733, 741, 751, 766, 767, 768], "null_strategi": [54, 82], "nullstrategi": [54, 82], "ignor": [54, 82, 107, 146, 199, 200, 259, 267, 313, 351, 404, 405, 479, 593, 682, 767, 768], "propag": [54, 82, 199, 200, 404, 405], "uint8": [54, 143, 144, 242, 347, 348, 449, 470, 765], "666667": [54, 152, 308], "id_var": [56, 287], "value_var": [56, 287], "variable_nam": [56, 287], "value_nam": [56, 287], "unpivot": [56, 287], "wide": [56, 96, 287], "leav": [56, 287], "identifi": [56, 287], "massag": [56, 287], "variabl": [56, 88, 287, 457, 536], "while": [56, 93, 287, 742, 767, 768], "measur": [56, 287], "just": [56, 287, 751], "non": [56, 203, 214, 215, 216, 217, 218, 219, 221, 222, 223, 287, 407, 418, 419, 420, 421, 422, 423, 425, 426, 427, 460, 482, 575, 618, 623, 664, 702, 707], "give": [56, 183, 211, 287, 391, 567, 652, 743, 747, 753, 754, 755, 779], "chunkedarrai": [58, 530], "per": [59, 105, 548, 550, 552, 555, 556, 557, 558, 559, 560, 561, 562, 594, 596, 683, 685, 766, 767], "as_dict": 60, "split": [60, 163, 539, 634, 635, 718, 719], "partit": [60, 747, 749, 752], "keep": [60, 94, 97, 182, 306, 741, 751], "predict": [60, 62, 65, 97], "requir": [60, 90, 94, 102, 109, 152, 153, 154, 250, 306, 310, 359, 360, 361, 460, 464, 534, 638, 722, 763, 764], "distinct": [60, 208, 412, 510, 512, 513, 611, 699, 768], "k": [60, 183, 249, 391, 463, 563, 648], "l": [60, 163], "m": [60, 314, 455, 490, 491, 511, 513, 564, 567, 583, 587, 638, 649, 652, 672, 676, 722], "func": [61, 289, 320], "arg": [61, 90, 110, 289, 320, 460, 470, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 529], "kwarg": [61, 90, 102, 110, 289, 310, 460, 470, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508], "self": [61, 202, 259, 267, 289, 299, 319, 432, 433, 469, 479], "keyword": [61, 70, 289, 314, 747], "def": [61, 93, 289, 766, 767, 768], "cast_str_to_int": [61, 289], "col_nam": [61, 289], "aggregate_fn": 62, "pivotagg": 62, "sort_column": 62, "spreadsheet": [62, 742], "well": 62, "One": [62, 311, 314], "predefin": 62, "transpos": [62, 551], "discoveri": 62, "interpol": [64, 160, 195, 207, 219, 291, 411, 423, 552, 739], "interpolationmethod": [64, 207, 219, 291, 411, 423, 552, 739], "between": [64, 107, 131, 147, 170, 203, 207, 219, 291, 334, 352, 407, 411, 423, 480, 484, 552, 598, 616, 687, 700, 738, 739, 745, 758, 765, 766, 767, 768], "higher": [64, 109, 207, 219, 291, 411, 423, 552, 739], "midpoint": [64, 207, 219, 291, 411, 423, 552, 739], "contigu": [65, 480, 530, 534, 741, 743, 751, 753, 754, 755], "subsequ": 65, "old": [66, 293], "new_col": 67, "val": [69, 248, 563, 648], "by_pred": 70, "accord": 70, "param": [70, 767, 768], "mutual": 70, "exclus": 70, "addition": 70, "ensur": [70, 253, 283, 460, 466, 770], "clariti": 70, "suppli": 70, "error": [70, 131, 314, 334, 515, 598, 619, 624, 638, 645, 687, 703, 708, 722, 741, 751], "anyth": 70, "toomanyrowsreturn": [70, 779], "norowsreturn": [70, 779], "inherit": 70, "rowsexcept": [70, 779], "columnar": [71, 533, 535], "frac": [72, 152, 153, 154, 225, 234, 249, 359, 360, 361, 429, 443, 463], "with_replac": [72, 225, 429], "shuffl": [72, 225, 429, 541], "item": [72, 157, 163, 225, 363, 429, 480, 592, 596, 598, 635, 681, 685, 687, 719], "cannot": [72, 225, 299, 429, 634, 718, 741], "fraction": [72, 105, 203, 225, 407, 429, 580, 638, 669, 763, 764], "onc": [72, 225, 256, 429, 741, 742], "shift_and_fil": 76, "shift": [77, 146, 203, 229, 298, 351, 407, 437, 481, 593, 682], "shrink": [78, 438], "usag": [78, 438, 741, 751, 767, 768], "fit": [78, 96, 438], "exact": [78, 638, 722, 766, 767, 768], "hold": [78, 478], "support": [79, 102, 109, 235, 300, 310, 314, 444, 530, 606, 632, 695, 716, 742, 749, 765, 768], "nulls_last": [80, 126, 128, 236, 301, 329, 332], "accept": [80, 740, 741, 743, 747], "descend": [80, 126, 128, 227, 301, 329, 332, 434], "syntax": [80, 299, 314], "ddof": [81, 98, 239, 254, 302, 308, 447, 467, 738, 758, 759, 771], "standard": [81, 153, 221, 234, 239, 302, 360, 443, 447, 570, 624, 655, 708, 757, 759], "deviat": [81, 153, 221, 239, 302, 360, 447, 759], "degre": [81, 98, 239, 254, 447, 467, 738, 758], "freedom": [81, 98, 239, 254, 447, 467, 738, 758], "21": [82, 584, 673], "nth": [84, 245, 305, 452, 635, 719], "arrow": [85, 106, 456, 460, 515, 530, 551, 743, 753], "mostli": [85, 161], "categoricaltyp": 85, "pyarrow": [85, 89, 90, 109, 314, 456, 459, 460, 530, 534, 741, 743, 747, 752, 757, 780], "large_str": 85, "as_seri": 86, "fruit": [86, 205, 213, 241, 621, 636, 705, 720], "car": [86, 205, 213, 241], "beetl": [86, 205, 213, 241], "audi": [86, 205, 213, 241], "28": [86, 587], "300": [86, 419, 420, 422], "slow": [87, 145, 349, 532, 535, 741, 751], "hot": 88, "encod": [88, 487, 508, 619, 703, 741, 751], "dummi": [88, 457, 536], "foo_1": 88, "foo_2": 88, "foo_3": 88, "bar_6": 88, "bar_7": 88, "bar_8": 88, "ham_a": 88, "ham_b": 88, "ham_c": 88, "u8": [88, 457, 470], "re": [89, 730], "attempt": [89, 460], "ll": [89, 460], "instal": [89, 90, 299, 460, 534, 741, 743, 747, 749, 757], "numpy_arrai": 89, "date_as_object": 90, "sent": [90, 460], "datetime64": 90, "pandas_df": 90, "core": 90, "struct": [92, 95, 110, 253, 307, 314, 610, 634, 635, 718, 719, 779], "three": [92, 760], "four": [92, 760], "five": 92, "num": [92, 170, 173, 641], "include_head": 93, "header_nam": 93, "column_nam": 93, "iter": [93, 145, 349], "diagon": [93, 480], "Will": [93, 259, 267, 299, 314, 479, 733, 736], "veri": [93, 109, 258, 342], "perhap": 93, "column_2": 93, "auto": [93, 747, 755], "name_gener": [93, 610], "base_nam": 93, "my_column_": 93, "my_column_0": 93, "my_column_1": 93, "my_column_2": 93, "uniquekeepstrategi": [94, 306], "origin": [94, 182, 210, 306, 618, 622, 623, 624, 626, 630, 641, 702, 706, 707, 708, 710, 714, 725, 741], "fail": [94, 306, 320, 638, 722], "decompos": [95, 307], "field": [95, 105, 307, 501, 610, 634, 635, 643, 718, 719, 728], "t_a": [95, 307], "t_b": [95, 307], "t_c": [95, 307], "t_d": [95, 307], "womp": [95, 307], "t_": [95, 307], "t_struct": [95, 307], "step": [96, 474], "unstackdirect": 96, "without": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 349, 354, 485, 673, 744, 748, 752, 756], "much": [96, 145, 349], "pivot": [96, 779], "skip": [96, 320, 741, 742, 751], "phase": 96, "direct": [96, 747, 749, 755], "don": [96, 145, 349, 431, 468, 473, 480, 594, 683], "experiment": [96, 102, 145, 215, 216, 217, 218, 219, 221, 222, 223, 310, 349, 485, 673, 752], "subject": 96, "being": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 349, 485, 673, 741, 751, 752, 772], "break": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 349, 485, 673, 752], "ascii_uppercas": 96, "eager": [96, 474, 475, 731, 750, 760, 777, 779], "g": [96, 155, 227, 431, 434, 460, 526, 741, 742, 743, 747, 753, 755], "h": [96, 163], "col1_0": 96, "col1_1": 96, "col1_2": 96, "col2_0": 96, "col2_1": 96, "col2_2": 96, "time_column": 97, "regular": [97, 155, 478, 509, 526], "frequenc": 97, "ha": [97, 109, 117, 145, 249, 257, 338, 349, 370, 381, 463, 473, 613, 645], "forward_fil": 97, "06": [97, 579, 588], "varianc": [98, 154, 183, 223, 254, 308, 361, 391, 427, 467, 771], "grow": 99, "b_squar": [101, 309], "36": [101, 309], "named_expr": [102, 310], "overwrit": [102, 267, 309, 310, 741, 751], "provid": [102, 310, 619, 620, 622, 624, 645, 703, 704, 706, 708, 741, 749, 751, 767, 768, 783], "is_not": [102, 310], "opt": [102, 310], "via": [102, 310, 741, 742, 751, 753, 755], "flag": [102, 227, 283, 310, 314, 434, 765], "with_columns_kwarg": [102, 310], "row_nr": [103, 312], "binaryio": [104, 106, 740, 741, 742, 743, 744, 747, 748], "bytesio": [104, 105, 106, 109, 740, 741, 742, 743, 747], "path": [104, 105, 106, 107, 108, 109, 227, 292, 313, 434, 624, 708, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 753, 754, 755], "compress": [104, 106, 109], "avrocompress": 104, "uncompress": [104, 106, 109, 743, 753], "write": [104, 105, 106, 107, 109, 134, 135, 136, 299, 313, 339, 340, 341], "apach": [104, 109, 740], "avro": [104, 740, 779], "written": [104, 105, 106, 107, 108, 109, 313], "snappi": [104, 109], "deflat": 104, "has_head": [105, 741, 742, 751], "sep": [105, 482, 741, 751], "quot": [105, 741, 751], "batch_siz": [105, 741, 754], "1024": [105, 741, 754], "datetime_format": 105, "date_format": 105, "time_format": 105, "float_precis": 105, "null_valu": [105, 741, 751], "textio": [105, 741], "_io": [105, 740, 742, 743], "pathlib": [105, 107, 108, 292, 313, 740, 742, 743, 744, 745, 746, 748, 751, 753, 754], "comma": 105, "csv": [105, 644, 741, 742, 751, 779], "symbol": 105, "process": 105, "thread": [105, 594, 683, 741, 749, 769], "chrono": [105, 582, 638, 671, 722], "crate": 105, "precis": [105, 564, 638, 649], "timeunit": [105, 455, 490, 491, 511, 564, 583, 587, 649, 672, 676], "decim": [105, 224, 428], "dirpath": [105, 751], "new_fil": 105, "ipccompress": 106, "ipc": [106, 743, 744, 752, 753, 779], "binari": 106, "stream": 106, "feather": [106, 743, 753, 779], "lz4": [106, 109], "zstd": [106, 109], "pretti": 107, "row_ori": 107, "json_lin": [107, 745], "to_str": [107, 313], "io": [107, 108, 292, 313, 745, 746, 783], "iobas": [107, 108, 292, 313, 745, 746], "serial": [107, 108], "json": [107, 108, 272, 292, 313, 624, 708, 745, 746, 754, 779], "represent": [107, 108, 248, 261, 262, 462, 563, 565, 568, 570, 572, 574, 575, 578, 579, 580, 585, 586, 588, 648, 650, 653, 655, 661, 663, 664, 667, 668, 669, 674, 675, 677, 781], "common": 107, "deprec": [107, 259, 267, 313, 479, 745, 774], "toggl": [107, 745, 770], "ndjson": [107, 745], "write_ndjson": 107, "newlin": [108, 746, 754], "delimit": [108, 616, 700, 741, 746, 751, 754], "parquetcompress": 109, "compression_level": 109, "row_group_s": 109, "use_pyarrow": [109, 459, 741, 743, 747], "pyarrow_opt": [109, 747], "parquet": [109, 747, 748, 755, 779], "gzip": 109, "lzo": 109, "brotli": 109, "actual": [109, 438, 742, 767, 768], "lz4raw": 109, "good": 109, "yet": 109, "been": [109, 208, 412], "older": 109, "reader": [109, 743, 747], "guarante": [109, 267, 741], "disk": [109, 299], "22": [109, 478, 584, 587, 638, 673, 722], "reduc": [109, 397, 410, 449, 546, 547, 549, 553, 741, 747, 751, 753, 754, 755], "pressur": [109, 747, 754, 755], "improv": [109, 743, 753], "speed": 109, "At": 109, "moment": [109, 183, 234, 391, 443], "featur": [109, 470], "write_t": 109, "context": [110, 112, 117, 161, 236, 237, 253, 311, 470, 473, 483, 527, 594, 612, 683, 756, 777], "arr": [110, 314, 460, 514, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 682, 683, 686, 687, 689, 694, 695, 698, 777, 782], "namespac": [110, 129, 132, 150, 240, 314, 333, 335, 355, 448, 774, 779, 781], "relat": [110, 129, 132, 150, 240, 314, 333, 335, 355, 448], "cat": [110, 248, 314, 470, 482, 485, 563, 617, 639, 640, 648, 701, 777, 782], "meta": [110, 779], "absolut": [111, 315, 763, 764], "94": 112, "renam": [113, 192, 615, 643, 728, 741, 777], "confus": 114, "tt": 114, "tf": [114, 115], "ff": [114, 115], "upcast": 116, "supertyp": 116, "tail": [116, 234, 443, 539], "project": [117, 236, 237, 259, 267, 283, 290, 299, 479, 751, 753, 754, 755], "depend": [117, 208, 412, 473, 527, 589, 590, 612, 678, 679, 757], "expect": [117, 283, 473, 519, 522, 525], "assum": [117, 283, 645], "a_times_2": 117, "element": [118, 119, 120, 121, 122, 123, 137, 138, 140, 141, 142, 143, 144, 145, 156, 166, 174, 189, 203, 208, 211, 226, 231, 232, 233, 238, 246, 247, 249, 320, 321, 322, 323, 324, 325, 326, 343, 344, 345, 346, 347, 348, 349, 362, 367, 382, 395, 407, 412, 430, 440, 441, 442, 446, 447, 453, 454, 463, 464, 467, 594, 634, 635, 683, 718, 719], "invers": [118, 119, 120, 121, 122, 123, 321, 322, 323, 324, 325, 326], "cosin": [118, 119, 137, 138, 191, 321, 322, 343, 344], "570796": [118, 120, 321, 323], "hyperbol": [119, 121, 123, 138, 233, 247, 322, 324, 326, 344, 442, 454], "sine": [120, 121, 191, 232, 233, 323, 324, 441, 442], "881374": [121, 324], "tangent": [122, 123, 246, 247, 325, 326, 453, 454], "785398": [122, 325], "inf": [123, 172, 175, 326, 379, 383, 407, 485], "maxim": [124, 327, 546, 558], "minim": [125, 328, 399, 549, 561, 590, 679], "would": [126, 128, 208, 329, 332, 412, 460, 476, 596, 612, 685], "arg_sort": [128, 332], "exprlistnamespac": 129, "page": [129, 132, 240, 743, 753, 779], "full": [129, 132, 240, 490, 741, 751], "detail": [129, 132, 240, 749, 763, 764, 783], "next": [130, 208, 412], "strict": [131, 314, 334, 431, 619, 638, 703, 722], "throw": [131, 314, 334, 624, 708], "due": [131, 334], "overflow": [131, 143, 144, 242, 314, 334, 347, 348, 449], "i32": [131, 588, 767, 772], "exprcatnamespac": 132, "set_ord": 132, "round": [133, 164, 246, 336, 369], "min_val": [134, 136, 339, 341], "max_val": [134, 135, 339, 340], "otherwis": [134, 135, 136, 152, 153, 154, 210, 320, 339, 340, 341, 359, 360, 361, 414, 432, 433, 772], "foo_clip": 134, "clip": [135, 136, 340, 341], "543081": [138, 344], "cumul": [140, 141, 142, 143, 144, 345, 346, 347, 348], "len": [140, 212, 416, 485, 625, 626, 630, 641, 710, 714, 725, 766, 767, 768], "a_revers": [140, 141, 142, 143, 144, 192, 213, 241], "product": [143, 147, 347, 352], "int16": [143, 144, 242, 347, 348, 449], "uint16": [143, 144, 242, 347, 348, 449], "prevent": [143, 144, 242, 347, 348, 449], "issu": [143, 144, 242, 347, 348, 449, 741, 742, 751], "min_period": [145, 152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 349, 359, 360, 361, 418, 419, 420, 421, 422, 423, 425, 426, 427], "slide": [145, 349], "increas": [145, 349, 747], "anoth": [145, 237, 320, 349, 431, 564, 649], "realli": [145, 349], "o": [145, 163, 249, 349, 463, 743, 753], "complex": [145, 249, 349, 463], "visit": [145, 349], "null_behavior": [146, 351, 593, 682], "nullbehavior": [146, 351, 593, 682], "th": [146, 234, 351, 443, 593, 682], "discret": [146, 151, 351, 357, 485, 593, 682], "handl": [146, 351, 593, 619, 641, 682, 703, 725, 741, 751], "44": 147, "drop_nul": 148, "drop_nan": 149, "exprdatetimenamespac": 150, "718281828459045": [151, 188, 357, 394], "formula": [151, 357], "pk": [151, 357], "log": [151, 249, 357, 463], "probabl": [151, 357], "doesn": [151, 357, 468, 751], "459148": 151, "754888": 151, "com": [152, 153, 154, 359, 360, 361, 622, 706], "span": [152, 153, 154, 359, 360, 361], "half_lif": [152, 153, 154, 359, 360, 361], "alpha": [152, 153, 154, 359, 360, 361], "adjust": [152, 153, 154, 234, 359, 360, 361, 443], "exponenti": [152, 153, 154, 156, 359, 360, 361, 362], "weight": [152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 359, 360, 361, 418, 419, 420, 421, 422, 423, 425, 426, 427, 443], "move": [152, 153, 154, 215, 216, 218, 222, 359, 360, 361, 419, 420, 422, 426], "averag": [152, 208, 359, 412], "decai": [152, 153, 154, 359, 360, 361], "term": [152, 153, 154, 359, 360, 361], "mass": [152, 153, 154, 359, 360, 361], "gamma": [152, 153, 154, 359, 360, 361], "foral": [152, 153, 154, 359, 360, 361], "geq": [152, 153, 154, 359, 360, 361], "theta": [152, 153, 154, 359, 360, 361], "half": [152, 153, 154, 359, 360, 361], "life": [152, 153, 154, 359, 360, 361], "exp": [152, 153, 154, 359, 360, 361], "ln": [152, 153, 154, 359, 360, 361], "smooth": [152, 153, 154, 359, 360, 361], "factor": [152, 153, 154, 248, 359, 360, 361, 462], "leq": [152, 153, 154, 359, 360, 361], "divid": [152, 153, 154, 183, 359, 360, 361, 391, 584, 673], "begin": [152, 153, 154, 359, 360, 361, 622, 706], "account": [152, 153, 154, 359, 360, 361, 577, 666], "imbal": [152, 153, 154, 359, 360, 361], "rel": [152, 153, 154, 359, 360, 361, 551, 577, 666, 763, 764], "ew": [152, 153, 154, 359, 360, 361], "w_i": [152, 153, 154, 359, 360, 361], "recurs": [152, 153, 154, 359, 360, 361], "y_0": [152, 153, 154, 359, 360, 361], "x_0": [152, 153, 154, 359, 360, 361], "y_t": [152, 153, 154, 359, 360, 361], "y_": [152, 153, 154, 359, 360, 361], "x_t": [152, 153, 154, 359, 360, 361], "observ": [152, 153, 154, 359, 360, 361], "428571": 152, "bia": [153, 154, 183, 220, 234, 360, 361, 391, 424, 443], "correct": [153, 154, 183, 220, 234, 283, 360, 361, 391, 424, 443, 742], "unbias": [153, 154, 360, 361], "963624": 153, "928571": 154, "wildcard": [155, 471, 478, 526, 528, 777], "regex": [155, 478, 526, 617, 618, 621, 622, 623, 628, 629, 636, 701, 702, 705, 706, 707, 712, 713, 720], "aa": [155, 526], "ba": [155, 526], "cc": [155, 526], "718282": 156, "389056": 156, "54": 156, "59815": 156, "expand": [157, 163, 211, 363], "extend": [158, 319, 364], "group_col": [161, 255], "g1": [161, 202, 255], "g2": [161, 202, 255], "lt": [161, 255], "gte": [161, 255], "explod": 163, "hello": [163, 471, 687, 709], "world": [163, 687, 709], "r": [163, 618, 622, 623, 628, 702, 706, 707, 712], "word": 163, "down": [164, 369, 751, 753, 754, 755], "latest": [165, 613], "2461716855791224000": 166, "16174362112783765148": 166, "13569566217648818014": 166, "11638928888656214026": 166, "6351727772611549480": 166, "fmt": [168, 277, 529, 582, 638, 671, 722], "cumsum": [168, 277], "regrid": 169, "grid": 169, "df_original_grid": 169, "grid_point": 169, "df_new_grid": 169, "include_bound": 170, "primit": [170, 174, 460], "exclud": [170, 478, 767, 768], "finit": [172, 379], "optional_memb": [174, 382], "infinit": [175, 383], "_isnan": 176, "a_isnan": 176, "b_isnan": 176, "negat": 177, "_is_not_nan": 178, "a_is_not_nan": 178, "b_is_not_nan": 178, "_not_nul": 179, "a_not_nul": 179, "b_not_nul": 179, "_isnul": 180, "a_isnul": 180, "b_isnul": 180, "root": [182, 192, 205, 238, 241, 446, 614], "With": [182, 742], "fisher": [183, 234, 391, 443], "pearson": [183, 234, 391, 443, 738], "dataset": [183, 391, 741, 751, 752, 779], "fourth": [183, 391], "central": [183, 234, 391, 443], "squar": [183, 238, 391, 446, 541], "definit": [183, 391], "subtract": [183, 391], "distribut": [183, 234, 391, 443], "elimin": [183, 391], "come": [183, 391, 774, 781], "bias": [183, 234, 391, 443], "scipi": [183, 234, 391, 443], "stat": [183, 234, 391, 443, 779], "153061": 183, "logarithm": [188, 189, 394, 395], "584963": 188, "30103": 189, "60206": 189, "lowest": 190, "9223372036854775808": 190, "agg_list": 191, "elementwis": [191, 214, 215, 216, 217, 218, 219, 221, 222, 223, 418, 419, 420, 421, 422, 423, 425, 426, 427, 471, 472], "transform": [191, 639, 640], "third": 191, "parti": 191, "librari": [191, 515, 521, 783], "book": 191, "to_numpi": 191, "argmax": 191, "_revers": [192, 213, 241], "b_revers": [192, 213, 241], "most": [197, 203, 253, 400, 407, 466, 530, 613, 635, 719], "occur": [197, 208, 259, 267, 299, 400, 412, 479], "poison": [199, 200, 404, 405], "encount": [199, 200, 404, 405, 515, 624, 708], "nanmax": [199, 200, 404, 405], "wherea": [199, 200, 276, 282, 404, 405], "subgroup": 202, "postgr": [202, 749], "max_by_group": 202, "percentag": [203, 407, 765, 767, 768], "recent": [203, 407], "least": [203, 253, 407, 466, 519, 767], "previou": [203, 407], "percent": [203, 407], "090909": 203, "expon": 204, "power": 204, "27": [204, 553, 579, 588], "64": [204, 407, 493, 496, 505], "reverse_": 205, "reverse_a": 205, "reverse_fruit": 205, "reverse_b": 205, "reverse_car": 205, "rankmethod": [208, 412], "deal": [208, 314, 412, 638, 722], "ti": [208, 412], "appropri": [208, 412], "dens": [208, 412], "ordin": [208, 412, 578, 667], "avail": [208, 267, 412, 766, 774, 777, 781, 782], "competit": [208, 412], "highest": [208, 252, 412], "immedi": [208, 412, 760], "those": [208, 412], "correspond": [208, 412, 570, 655], "repeat": [209, 211, 743, 753], "sign": [210, 414, 494, 495, 496, 497, 577, 641, 666, 725], "bit": [210, 414, 492, 493, 494, 495, 496, 497, 503, 504, 505, 506, 617, 701], "unsign": [210, 414, 503, 504, 505, 506], "64bit": [210, 414], "safe": [210, 414, 460], "coerc": 211, "coercion": [211, 259, 267, 290, 299, 479], "op": [211, 768], "dim": [212, 416], "flat": [212, 416], "fruits_revers": [213, 241], "cars_revers": [213, 241], "window_s": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "specif": [214, 314, 418, 638, 722, 749, 760, 767], "rolling_min": [214, 418], "rolling_max": [214, 418], "rolling_mean": [214, 418], "rolling_sum": [214, 418], "multipli": [214, 215, 216, 217, 218, 219, 221, 222, 223, 418, 419, 420, 421, 422, 423, 425, 426, 427], "358899": 214, "041452": 214, "567764": 214, "travers": [215, 216, 218, 221, 222, 223, 419, 420, 422, 425, 426, 427], "vector": [215, 216, 218, 221, 222, 223, 419, 420, 422, 425, 426, 427], "fix": [215, 216, 217, 218, 219, 221, 222, 223, 587, 676, 742, 766, 767], "5h": [215, 216, 217, 218, 219, 221, 222, 223], "groupby_rol": [215, 216, 217, 218, 219, 221, 222, 223, 274], "quantil": [219, 423], "33": [219, 224, 478], "skew": [220, 424], "527525": 221, "333333": [223, 407], "digit": [224, 428, 641, 702, 725], "17": [224, 343], "maintain": [226, 250, 430, 464], "enabl": [227, 434], "downstream": [227, 434], "code": [227, 434], "user": [227, 434], "fast": [227, 434], "incorrect": [227, 434, 587, 645, 676], "care": [227, 434], "content": [230, 253, 439], "modul": 230, "175201": [233, 442], "sampl": [234, 443, 541, 741], "about": [234, 443], "unimod": [234, 443], "continu": [234, 443], "skewtest": [234, 443], "enough": [234, 443, 594, 683], "speak": [234, 443], "coeffici": [234, 443], "g_1": [234, 443], "m_3": [234, 443], "m_2": [234, 443], "m_i": [234, 443], "sum_": [234, 443], "texttt": [234, 443], "k_3": [234, 443], "k_2": [234, 443], "sqrt": [234, 443], "343622": 234, "whole": [236, 237, 575, 622, 664, 706, 742], "larg": [236, 237, 551], "larger": 236, "414214": [238, 446], "exprstringnamespac": 240, "to_uppercas": 240, "taken": [244, 606, 632, 695, 716], "56": [246, 757], "761594": [247, 454], "replic": [248, 462], "vals_phys": 248, "largest": [249, 463], "smallest": [249, 463], "appear": [251, 465], "value_count": 251, "might": [251, 612, 741, 751], "id": [251, 253, 465, 541, 628, 629], "9223372036854775807": 252, "multithread": 253, "ldf": [256, 258, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 644, 645, 646, 647], "hit": 256, "node": [256, 277, 283, 290], "type_coercion": [259, 261, 267, 290, 299, 479], "predicate_pushdown": [259, 261, 267, 283, 290, 299, 479], "projection_pushdown": [259, 261, 267, 283, 290, 299, 479], "simplify_express": [259, 261, 267, 290, 299, 479], "string_cach": [259, 267, 479], "no_optim": [259, 267, 283, 290, 479], "slice_pushdown": [259, 261, 267, 283, 290, 299, 479], "common_subplan_elimin": [259, 261, 267, 299, 479], "huge": 259, "saver": 259, "debug": [259, 267, 283], "pushdown": [259, 267, 283, 290, 299, 312, 479], "simplifi": [259, 267, 290, 299, 479], "pleas": [259, 267], "try": [259, 267, 299, 479, 523, 524, 741, 742, 743, 747, 751, 753, 755], "branch": [259, 267, 299, 479], "subplan": [259, 267, 299, 479], "lf": [265, 270, 295], "n_row": [267, 740, 741, 743, 747, 751, 753, 754, 755], "500": [267, 419, 420, 422], "purpos": 267, "scan": [267, 276, 282, 532, 535, 741, 747, 751, 752, 753, 754, 755], "help": [267, 777], "final": [267, 755], "influenc": [267, 283], "read_json": [272, 313], "lazygroupbi": [273, 274, 275], "NOT": [273, 643], "typeerror": 273, "subscript": 273, "load": [276, 282, 749], "validate_output_schema": 283, "past": 283, "paramount": 283, "hard": 283, "bug": [283, 645], "alwai": [283, 432, 433, 612, 741], "caller": [283, 645], "invari": 283, "upheld": 283, "prune": 283, "from_json": 292, "write_json": 292, "output_path": 299, "raw_output": 299, "figsiz": 299, "plot": 299, "figur": 299, "dot": 299, "matplotlib": 299, "290994": 302, "extern": 311, "access": 311, "part": [311, 530, 634, 635, 718, 719], "block": 312, "arraylik": 314, "nan_to_nul": 314, "dtype_if_empti": 314, "position": 314, "pattern": [314, 432, 433, 617, 618, 622, 623, 628, 629, 701, 702, 706, 707, 712, 713, 741, 751, 753, 755], "scenario": 314, "through": [314, 749], "s3": [314, 752], "inner_dtyp": 314, "time_unit": [314, 490, 491, 511, 587], "u": [314, 455, 490, 491, 511, 564, 567, 583, 587, 638, 649, 652, 672, 676, 750], "sr": 316, "new_aliased_sr": 316, "append_chunk": 319, "super": 319, "skip_nul": 320, "special": [320, 741, 751], "141593": 321, "292432": 322, "549306": 326, "listnamespac": 333, "catnamespac": 335, "math": [343, 441, 453], "pi": [343, 441, 453], "1232e": 343, "quick": 350, "mix": 350, "series_num": 350, "581139": 350, "series_str": 350, "datetimenamespac": 355, "005": 357, "06293300616044681": 357, "65": 357, "8568409950394724": 357, "4000000": 358, "814697265625": 358, "lit": [366, 528, 761, 772], "bitmask": 370, "swiftli": 370, "89438004737668041": 371, "14107061265552512458": 371, "15437026767517145468": 371, "datelik": 376, "sublist": [382, 589, 590, 592, 593, 595, 596, 597, 598, 599, 606, 609, 678, 679, 681, 682, 684, 685, 686, 687, 688, 695, 698], "timedelta": [396, 399, 404, 405, 511, 565, 567, 568, 572, 574, 577, 578, 579, 580, 583, 584, 585, 586, 588, 656, 658, 660, 666, 673], "166667": 407, "142857": 407, "125": 407, "128": 407, "512": 407, "local": [408, 409], "peak": [408, 409], "i8": 417, "nanstd": 418, "858612": 418, "200": [419, 420, 422], "400": [419, 420, 422], "150": 420, "250": 420, "350": 420, "450": 420, "dev": 425, "12345": 428, "56789": 428, "901234": 428, "57": 428, "mutat": 433, "exactli": [438, 634, 635, 718, 719, 763, 764, 767, 768], "2246e": [441, 453], "syntact": [446, 526, 527, 537, 739, 756, 761], "sugar": [446, 526, 527, 537, 739, 756, 761], "delta": [447, 467, 491, 738, 758], "divisor": [447, 467], "stringnamespac": 448, "6331e16": 453, "lib": 456, "int64arrai": 456, "a_1": [457, 634, 718], "a_2": 457, "a_3": 457, "convers": [459, 460, 638, 722, 779], "zero_copy_onli": 460, "writabl": 460, "complet": [460, 539], "view": 460, "know": [460, 468], "what": [460, 468], "presenc": 460, "immut": 460, "made": 460, "ignore_nul": 468, "seriesview": 468, "unless": [468, 531], "manag": 470, "categori": [470, 485, 563, 648, 770, 779], "invalid": [470, 619, 624, 703, 708, 741, 751], "outermost": 470, "exit": 470, "color": [470, 541], "red": [470, 541], "green": [470, 541], "blue": 470, "yellow": 470, "black": 470, "succe": [470, 741, 751], "df_join": 470, "thing": [471, 527, 751], "columnwis": [471, 472], "AND": 471, "bitwis": [471, 472], "OR": 472, "Be": 474, "eagerli": [475, 750], "oppos": 475, "lazili": [475, 741, 751, 753, 754, 755], "to_seri": [475, 610], "argsort": 476, "hamburg": 478, "lazy_fram": 479, "threadpool": 479, "concatmethod": 480, "relev": 480, "concatten": 480, "concat": [481, 482], "lag": 481, "mimic": 481, "a_lag_": 481, "a_rol": 481, "dog": [482, 617, 639, 640, 701], "plai": 482, "swim": 482, "walk": 482, "full_sent": 482, "covari": 484, "bin": 485, "break_point_label": 485, "break_point": 485, "category_label": 485, "breakpoint": 485, "string_repr": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508], "tu": [490, 491, 564, 567, 583, 587, 649, 652, 672, 676], "tz": 490, "time_zon": 490, "timezon": 490, "zoneinfo": 490, "available_timezon": 490, "wrap": 500, "arbitrari": [500, 767], "composit": 501, "static": [507, 645], "utf": 508, "polars_u64_idx": 509, "compon": [510, 512, 513, 580, 638, 669], "31": [510, 512, 565, 566, 574, 585, 638, 650, 722, 757], "granular": 511, "finer": 511, "permut": 511, "drang": 511, "1985": 511, "07": [511, 565, 578, 586, 638, 722], "add_week": 513, "add_dai": 513, "add_second": 513, "add_millisecond": 513, "add_hour": 513, "add_millisec": 513, "ond": 513, "001": [513, 571, 576], "002": [513, 571, 576], "eval": 514, "rank": [514, 594, 683, 758], "concat_list": [514, 594, 683], "mathemat": 514, "a_b_doubl": 514, "state": 521, "panic": 521, "mismatch": 523, "incompat": 524, "intoexpr": 528, "accumul": 528, "fn": 528, "new_valu": 528, "fstring": 529, "placehold": 529, "hello_": 529, "_world": 529, "foo_": 529, "_bar_": 529, "foo_a_bar_1": 529, "foo_b_bar_2": 529, "foo_c_bar_3": 529, "closest": 530, "infer_schema_length": [532, 535, 741, 742, 751, 754], "nan_to_non": 534, "datetimeindex": 534, "pd_df": 534, "pd_seri": 534, "agg_group": 537, "idiomat": 539, "_sum": 539, "_tail_sum": 539, "bar_sum": 539, "bar_tail_sum": 539, "sub": [541, 621, 636, 705, 720], "triangl": 541, "group_df": 541, "nr": [544, 554, 646, 647], "833333": 547, "pivot_column": 551, "values_column": 551, "pivotop": 551, "ideal": 551, "categoricalord": [563, 648], "lexic": [563, 648], "lose": [564, 649], "2001": [564, 565, 567, 568, 572, 574, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 638, 673, 722], "tu_m": 564, "tu_n": 564, "extract": [565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 585, 586, 588, 623, 624, 650, 651, 653, 654, 655, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 674, 675, 677, 707, 708], "stop": [565, 567, 568, 572, 574, 578, 579, 583, 584, 585, 586, 588, 673, 740, 741, 743, 747, 751, 753, 754, 755], "weekdai": [565, 578], "day_of_month": [565, 578, 586], "ordinal_dai": [565, 586], "day_of_year": [565, 578, 586], "diff": [566, 569, 571, 573, 576, 581], "days_diff": 566, "epochtimeunit": [567, 652], "sinc": [567, 575, 652, 664], "unix": [567, 652], "epoch_n": 567, "epoch_": 567, "978307200000000": [567, 583], "978307200": 567, "978393600000000": [567, 583], "978393600": 567, "978480000000000": [567, 583], "978480000": 567, "hours_diff": 569, "iso": [570, 585, 655, 674], "milliseconds_diff": 571, "1001": [571, 576], "003": [571, 576], "997": [571, 576], "998": [571, 576], "999": [571, 575, 576, 664], "59": [572, 580, 661, 669], "minutes_diff": 573, "1440": 573, "leap": [575, 577, 664, 666], "000": [575, 664], "nanoseconds_diff": 576, "1000000": [576, 641], "minu": [577, 666], "dictat": [577, 666], "2000": 577, "2005": 577, "date_plus_1i": 577, "1y2mo": 577, "date_min": 577, "1998": 577, "2002": [577, 579, 588], "1999": 577, "2003": 577, "2004": 577, "2006": 577, "366": [578, 667], "180": [579, 588], "milli": [580, 669], "micro": [580, 669], "456789": 580, "654321": 580, "111110": 580, "765431": 580, "sec": 580, "11111": 580, "seconds_diff": 581, "timestamp_n": 583, "timestamp_m": 583, "978307200000": 583, "978393600000": 583, "978480000000": 583, "bucket": [584, 673], "49": [584, 673], "53": [585, 674], "mondai": [586, 675], "sundai": [586, 675], "tu_u": 587, "32971": 587, "32974": 587, "32976": 587, "compil": [589, 590, 678, 679], "membership": [592, 681], "against": [594, 683], "activ": [594, 683], "blindli": [594, 683], "worth": [594, 683], "n_field_strategi": 610, "tostructstrategi": 610, "first_non_nul": 610, "max_width": 610, "field_0": 610, "field_1": 610, "field_n": 610, "col_name_": 610, "col_name_0": 610, "col_name_1": 610, "col_name_2": 610, "produc": [612, 732, 767, 768], "computeerror": [612, 779], "undo": 615, "keep_nam": 615, "substr": [617, 621, 628, 629, 633, 634, 635, 636, 701, 705, 712, 713, 717, 718, 719, 720], "treat": [617, 628, 629, 701, 712, 713], "starts_with": [617, 621, 705], "ends_with": [617, 636, 720], "crab": [617, 701], "rab": [617, 701], "success": [618, 623, 702, 707], "overlap": [618, 623, 702, 707], "captur": [618, 622, 623, 702, 706, 707], "123": [618, 623, 629, 702, 707, 713], "bla": [618, 623, 702, 707], "asd": [618, 623, 702, 707], "xyz": [618, 623, 702, 707], "678": [618, 623, 702, 707], "910t": [618, 623, 702, 707], "count_digit": 618, "transferencod": [619, 620, 703, 704], "hex": [619, 620, 703, 704], "base64": [619, 620, 703, 704], "thrown": [619, 703], "unabl": [619, 703], "unhandl": [619, 703], "666f6f": [619, 620, 703, 704], "626172": [619, 620, 703, 704], "mango": [621, 636, 705, 720], "go": [621, 705], "has_suffix": 621, "group_index": [622, 706], "target": [622, 638, 706, 722], "http": [622, 706, 783], "vote": [622, 706], "ballon_dor": [622, 706], "candid": [622, 706], "messi": [622, 706], "ref": [622, 706], "candidat": [622, 706], "jorginho": [622, 706], "ronaldo": [622, 706], "w": [622, 706], "extracted_nr": 623, "910": [623, 707], "json_path": [624, 708], "jsonpath": [624, 708], "regardless": [624, 708], "document": [624, 638, 708, 722, 742, 749], "here": [624, 708, 749, 766, 767, 768], "json_val": [624, 708], "bear": 625, "110": 625, "fillchar": [626, 630, 710, 714], "justifi": [626, 630, 710, 714], "pad": [626, 630, 641, 710, 714, 725], "cow": [626, 630, 710, 714], "monkei": [626, 630, 710, 714], "hippopotamu": [626, 630, 710, 714], "whitespac": [627, 631, 637, 711, 715, 721], "trail": [627, 631, 637, 715, 721], "replace_al": [628, 712], "text": [628, 629], "123abc": [628, 712], "abc456": [628, 712], "abc": [628, 712], "abcabc": [629, 713], "123a123": [629, 713], "bc": [629, 713], "subslic": [632, 716], "pear": [632, 716], "papaya": [632, 716], "dragonfruit": [632, 716], "s_slice": 632, "ear": [632, 716], "aya": [632, 716], "uit": [632, 716], "ya": [632, 716], "onf": [632, 716], "inclus": [633, 634, 717, 718], "d_4": [634, 718], "_": [634, 718], "rename_field": [634, 635, 718, 719], "first_part": [634, 635, 718, 719], "second_part": [634, 635, 718, 719], "unnest": [634, 635, 718, 719], "restrict": [635, 719], "remaind": [635, 719], "prefix": [636, 641, 720, 725], "app": [636, 720], "has_prefix": 636, "pars": [638, 722, 741, 742, 751, 753, 754], "strftime": [638, 722], "anywher": [638, 722], "eg": 638, "3f": 638, "sun": [638, 722], "jul": [638, 722, 757], "34": [638, 722], "to_fram": [638, 642, 643, 718, 719, 722], "lowercas": [639, 723], "variant": [639, 640], "uppercas": [640, 724], "10000": 641, "100000": 641, "0010": 641, "0001": 641, "00000": 641, "00001": 641, "to_struct": [642, 643], "my_struct": [642, 643, 760], "anymor": 643, "panicexcept": [643, 779], "describ": [644, 767], "scan_csv": [644, 741], "n_uniqu": 644, "unique_nam": 644, "known": [645, 767], "equival": [723, 724], "export": 730, "allow_object": 731, "unknown": 731, "valueexcept": 731, "correl": [738, 758], "new_column": [741, 742], "comment_char": [741, 751], "quote_char": [741, 751], "skip_row": [741, 751], "ignore_error": [741, 751], "parse_d": [741, 751], "n_thread": 741, "8192": 741, "csvencod": [741, 751], "low_memori": [741, 747, 751, 754, 755], "storage_opt": [741, 743, 747, 753, 755], "skip_rows_after_head": [741, 751], "row_count_nam": [741, 743, 747, 751, 753, 754, 755], "row_count_offset": [741, 743, 747, 751, 753, 754, 755], "sample_s": 741, "eol_char": [741, 751], "handler": [741, 742], "builtin": [741, 742], "open": [741, 742, 743, 747, 753, 755], "stringio": 741, "fsspec": [741, 743, 747, 753, 755, 757], "remot": [741, 743, 747], "autogener": [741, 751], "column_x": [741, 751], "enumer": [741, 751], "shorter": 741, "comment": [741, 751], "line": [741, 742, 751], "escap": [741, 751], "cpu": 741, "system": 741, "multi": 741, "lossi": [741, 751], "decod": 741, "im": 741, "nativ": [741, 743, 747], "parser": 741, "even": 741, "regard": 741, "storag": [741, 743, 747, 753, 755], "connect": [741, 743, 747, 749, 752, 753, 755, 780], "host": [741, 743, 747, 753, 755], "port": [741, 743, 747, 749, 753, 755], "usernam": [741, 743, 747, 749, 753, 755], "password": [741, 743, 747, 749, 753, 755], "row_count": [741, 743, 747, 751, 753, 754, 755], "glob": [741, 751, 753, 755], "sheet_id": 742, "sheet_nam": 742, "xlsx2csv_option": 742, "read_csv_opt": 742, "excel": [742, 779], "xlsx": 742, "sheet": 742, "xlsx2csv": [742, 757], "read_csv": [742, 751], "skip_empty_lin": 742, "my": [742, 752], "datasheet": 742, "excel_fil": 742, "As": [742, 750], "look": 742, "twice": 742, "xl": 742, "xlsm": 742, "xlsb": 742, "odf": 742, "od": 742, "odt": 742, "from_panda": [742, 749], "memory_map": [743, 747, 753], "v2": [743, 753], "greatli": [743, 753], "read_ndjson": 745, "parallelstrategi": [747, 755], "directori": 747, "awar": 747, "stabl": 747, "row_group": [747, 755], "read_tabl": 747, "connection_uri": 749, "partition_on": 749, "partition_rang": 749, "partition_num": 749, "protocol": 749, "mysql": 749, "sqlite": 749, "redshift": 749, "clickhous": 749, "databas": 749, "altern": 749, "solut": 749, "engin": 749, "raw": 749, "connectorx": [749, 757], "uri": 749, "postgresql": 749, "server": 749, "backend": 749, "transfer": 749, "lineitem": 749, "partition_col": 749, "explicitli": [749, 766, 767], "mode": 750, "polarsdatatyp": 751, "with_column_nam": 751, "push": [751, 753, 754, 755], "therebi": [751, 753, 754, 755], "potenti": [751, 753, 754, 755], "overhead": [751, 753, 754, 755], "updat": 751, "my_long_fil": 751, "breezah": 751, "terribl": 751, "mydf": 751, "write_csv": 751, "cloud": 752, "dset": 752, "folder": 752, "1970": 752, "batch": 754, "version": 757, "stdout": 757, "info": 757, "platform": 757, "linux": 757, "microsoft": 757, "wsl2": 757, "x86_64": 757, "glibc2": 757, "main": 757, "gcc": 757, "20210110": 757, "spearman": 758, "sever": 760, "a_and_b": 760, "across": 761, "get_column": 761, "check_dtyp": [763, 764], "check_exact": [763, 764], "check_column_nam": 763, "rtol": [763, 764], "1e": [763, 764], "atol": [763, 764], "nans_compare_equ": [763, 764], "assertionerror": [763, 764], "inexact": [763, 764], "check_nam": 764, "searchstrategi": [765, 767, 768], "null_prob": [765, 767, 768], "recognis": 765, "chanc": [765, 767, 768], "addit": [765, 766], "hypothesi": [765, 766, 767, 768, 783], "sampled_from": 765, "unique_small_int": 765, "ccy": 765, "gbp": 765, "jpy": 765, "min_col": [766, 767], "max_col": [766, 767], "suitabl": 766, "standalon": [766, 767], "itself": 766, "explicit": 766, "omit": 766, "mincol": 766, "control": 766, "especi": 766, "punctuat": 766, "test_special_char_colname_init": 766, "test_unique_xyz": 766, "assert_someth": 766, "min_siz": [767, 768], "max_siz": [767, 768], "include_col": 767, "allowed_dtyp": [767, 768], "excluded_dtyp": [767, 768], "desir": 767, "onto": 767, "exist": 767, "independ": [767, 768], "basi": 767, "pct": 767, "preced": 767, "deploi": [767, 768], "decor": [767, 768], "characterist": [767, 768], "develop": [767, 768], "concret": [767, 768], "test_repr": [767, 768], "repr": [767, 768], "df_strategi": 767, "15836": 767, "1755e": 767, "38": 767, "575050513": 767, "constructor": [768, 779], "max_data_s": 768, "54666": 768, "35": 768, "6414": 768, "63290": 768, "pool": 769, "isn": 772, "thens": 772, "chain": 772, "favor": 774, "These": 777, "sometim": 777, "polar": [777, 779, 781, 783], "under": [777, 782], "overview": 779, "public": 779, "expos": 779, "descript": 779, "manipul": 779, "timeseri": 779, "set_tbl_format": 779, "set_tbl_cell_align": 779, "set_ascii_t": 779, "set_fmt_str_length": 779, "set_global_string_cach": 779, "set_tbl_col": 779, "set_tbl_row": 779, "set_tbl_width_char": 779, "set_utf8_t": 779, "set_tbl_hide_column_separ": 779, "set_tbl_hide_dataframe_shap": 779, "set_tbl_change_column_data_type_position_format": 779, "set_tbl_hide_column_data_typ": 779, "set_tbl_hide_column_nam": 779, "unset_global_string_cach": 779, "toggle_string_cach": 779, "arrowerror": 779, "duplicateerror": 779, "nodataerror": 779, "notfounderror": 779, "schemaerror": 779, "shapeerror": 779, "show_vers": 779, "readthedoc": 783}, "objects": {"polars.Config": [[1, 0, 1, "", "set_ascii_tables"], [2, 0, 1, "", "set_fmt_str_lengths"], [3, 0, 1, "", "set_global_string_cache"], [4, 0, 1, "", "set_tbl_cell_alignment"], [5, 0, 1, "", "set_tbl_change_column_data_type_position_format"], [6, 0, 1, "", "set_tbl_cols"], [7, 0, 1, "", "set_tbl_formatting"], [8, 0, 1, "", "set_tbl_hide_column_data_types"], [9, 0, 1, "", "set_tbl_hide_column_names"], [10, 0, 1, "", "set_tbl_hide_column_separator"], [11, 0, 1, "", "set_tbl_hide_dataframe_shape"], [12, 0, 1, "", "set_tbl_rows"], [13, 0, 1, "", "set_tbl_width_chars"], [14, 0, 1, "", "set_utf8_tables"], [15, 0, 1, "", "unset_global_string_cache"]], "polars": [[16, 1, 1, "", "DataFrame"], [110, 1, 1, "", "Expr"], [781, 1, 1, "", "LazyFrame"], [314, 1, 1, "", "Series"], [470, 1, 1, "", "StringCache"], [471, 3, 1, "", "all"], [472, 3, 1, "", "any"], [473, 3, 1, "", "apply"], [474, 3, 1, "", "arange"], [475, 3, 1, "", "arg_where"], [476, 3, 1, "", "argsort_by"], [477, 3, 1, "", "avg"], [478, 3, 1, "", "col"], [479, 3, 1, "", "collect_all"], [480, 3, 1, "", "concat"], [481, 3, 1, "", "concat_list"], [482, 3, 1, "", "concat_str"], [483, 3, 1, "", "count"], [484, 3, 1, "", "cov"], [485, 3, 1, "", "cut"], [510, 3, 1, "", "date"], [511, 3, 1, "", "date_range"], [512, 3, 1, "", "datetime"], [513, 3, 1, "", "duration"], [514, 3, 1, "", "element"], [526, 3, 1, "", "exclude"], [527, 3, 1, "", "first"], [528, 3, 1, "", "fold"], [529, 3, 1, "", "format"], [530, 3, 1, "", "from_arrow"], [531, 3, 1, "", "from_dict"], [532, 3, 1, "", "from_dicts"], [533, 3, 1, "", "from_numpy"], [534, 3, 1, "", "from_pandas"], [535, 3, 1, "", "from_records"], [536, 3, 1, "", "get_dummies"], [537, 3, 1, "", "groups"], [538, 3, 1, "", "head"], [730, 3, 1, "", "list"], [731, 3, 1, "", "lit"], [732, 3, 1, "", "map"], [733, 3, 1, "", "max"], [734, 3, 1, "", "mean"], [735, 3, 1, "", "median"], [736, 3, 1, "", "min"], [737, 3, 1, "", "n_unique"], [738, 3, 1, "", "pearson_corr"], [739, 3, 1, "", "quantile"], [740, 3, 1, "", "read_avro"], [741, 3, 1, "", "read_csv"], [742, 3, 1, "", "read_excel"], [743, 3, 1, "", "read_ipc"], [744, 3, 1, "", "read_ipc_schema"], [745, 3, 1, "", "read_json"], [746, 3, 1, "", "read_ndjson"], [747, 3, 1, "", "read_parquet"], [748, 3, 1, "", "read_parquet_schema"], [749, 3, 1, "", "read_sql"], [750, 3, 1, "", "repeat"], [751, 3, 1, "", "scan_csv"], [752, 3, 1, "", "scan_ds"], [753, 3, 1, "", "scan_ipc"], [754, 3, 1, "", "scan_ndjson"], [755, 3, 1, "", "scan_parquet"], [756, 3, 1, "", "select"], [757, 3, 1, "", "show_versions"], [758, 3, 1, "", "spearman_rank_corr"], [759, 3, 1, "", "std"], [760, 3, 1, "", "struct"], [761, 3, 1, "", "sum"], [762, 3, 1, "", "tail"], [769, 3, 1, "", "threadpool_size"], [770, 3, 1, "", "toggle_string_cache"], [771, 3, 1, "", "var"], [772, 3, 1, "", "when"]], "polars.DataFrame": [[16, 0, 1, "", "__init__"], [17, 0, 1, "", "apply"], [18, 0, 1, "", "cleared"], [19, 0, 1, "", "clone"], [20, 2, 1, "", "columns"], [21, 0, 1, "", "describe"], [22, 0, 1, "", "drop"], [23, 0, 1, "", "drop_in_place"], [24, 0, 1, "", "drop_nulls"], [25, 2, 1, "", "dtypes"], [26, 0, 1, "", "estimated_size"], [27, 0, 1, "", "explode"], [28, 0, 1, "", "extend"], [29, 0, 1, "", "fill_nan"], [30, 0, 1, "", "fill_null"], [31, 0, 1, "", "filter"], [32, 0, 1, "", "find_idx_by_name"], [33, 0, 1, "", "fold"], [34, 0, 1, "", "frame_equal"], [35, 0, 1, "", "get_column"], [36, 0, 1, "", "get_columns"], [37, 0, 1, "", "groupby"], [38, 0, 1, "", "groupby_dynamic"], [39, 0, 1, "", "groupby_rolling"], [40, 0, 1, "", "hash_rows"], [41, 0, 1, "", "head"], [42, 2, 1, "", "height"], [43, 0, 1, "", "hstack"], [44, 0, 1, "", "insert_at_idx"], [45, 0, 1, "", "interpolate"], [46, 0, 1, "", "is_duplicated"], [47, 0, 1, "", "is_empty"], [48, 0, 1, "", "is_unique"], [49, 0, 1, "", "join"], [50, 0, 1, "", "join_asof"], [51, 0, 1, "", "lazy"], [52, 0, 1, "", "limit"], [53, 0, 1, "", "max"], [54, 0, 1, "", "mean"], [55, 0, 1, "", "median"], [56, 0, 1, "", "melt"], [57, 0, 1, "", "min"], [58, 0, 1, "", "n_chunks"], [59, 0, 1, "", "null_count"], [60, 0, 1, "", "partition_by"], [61, 0, 1, "", "pipe"], [62, 0, 1, "", "pivot"], [63, 0, 1, "", "product"], [64, 0, 1, "", "quantile"], [65, 0, 1, "", "rechunk"], [66, 0, 1, "", "rename"], [67, 0, 1, "", "replace"], [68, 0, 1, "", "replace_at_idx"], [69, 0, 1, "", "reverse"], [70, 0, 1, "", "row"], [71, 0, 1, "", "rows"], [72, 0, 1, "", "sample"], [73, 2, 1, "", "schema"], [74, 0, 1, "", "select"], [75, 2, 1, "", "shape"], [76, 0, 1, "", "shift"], [77, 0, 1, "", "shift_and_fill"], [78, 0, 1, "", "shrink_to_fit"], [79, 0, 1, "", "slice"], [80, 0, 1, "", "sort"], [81, 0, 1, "", "std"], [82, 0, 1, "", "sum"], [83, 0, 1, "", "tail"], [84, 0, 1, "", "take_every"], [85, 0, 1, "", "to_arrow"], [86, 0, 1, "", "to_dict"], [87, 0, 1, "", "to_dicts"], [88, 0, 1, "", "to_dummies"], [89, 0, 1, "", "to_numpy"], [90, 0, 1, "", "to_pandas"], [91, 0, 1, "", "to_series"], [92, 0, 1, "", "to_struct"], [93, 0, 1, "", "transpose"], [94, 0, 1, "", "unique"], [95, 0, 1, "", "unnest"], [96, 0, 1, "", "unstack"], [97, 0, 1, "", "upsample"], [98, 0, 1, "", "var"], [99, 0, 1, "", "vstack"], [100, 2, 1, "", "width"], [101, 0, 1, "", "with_column"], [102, 0, 1, "", "with_columns"], [103, 0, 1, "", "with_row_count"], [104, 0, 1, "", "write_avro"], [105, 0, 1, "", "write_csv"], [106, 0, 1, "", "write_ipc"], [107, 0, 1, "", "write_json"], [108, 0, 1, "", "write_ndjson"], [109, 0, 1, "", "write_parquet"]], "polars.Expr": [[110, 0, 1, "", "__init__"], [111, 0, 1, "", "abs"], [112, 0, 1, "", "agg_groups"], [113, 0, 1, "", "alias"], [114, 0, 1, "", "all"], [115, 0, 1, "", "any"], [116, 0, 1, "", "append"], [117, 0, 1, "", "apply"], [118, 0, 1, "", "arccos"], [119, 0, 1, "", "arccosh"], [120, 0, 1, "", "arcsin"], [121, 0, 1, "", "arcsinh"], [122, 0, 1, "", "arctan"], [123, 0, 1, "", "arctanh"], [124, 0, 1, "", "arg_max"], [125, 0, 1, "", "arg_min"], [126, 0, 1, "", "arg_sort"], [127, 0, 1, "", "arg_unique"], [128, 0, 1, "", "argsort"], [129, 2, 1, "", "arr"], [130, 0, 1, "", "backward_fill"], [131, 0, 1, "", "cast"], [132, 2, 1, "", "cat"], [133, 0, 1, "", "ceil"], [134, 0, 1, "", "clip"], [135, 0, 1, "", "clip_max"], [136, 0, 1, "", "clip_min"], [137, 0, 1, "", "cos"], [138, 0, 1, "", "cosh"], [139, 0, 1, "", "count"], [140, 0, 1, "", "cumcount"], [141, 0, 1, "", "cummax"], [142, 0, 1, "", "cummin"], [143, 0, 1, "", "cumprod"], [144, 0, 1, "", "cumsum"], [145, 0, 1, "", "cumulative_eval"], [146, 0, 1, "", "diff"], [147, 0, 1, "", "dot"], [148, 0, 1, "", "drop_nans"], [149, 0, 1, "", "drop_nulls"], [150, 2, 1, "", "dt"], [151, 0, 1, "", "entropy"], [152, 0, 1, "", "ewm_mean"], [153, 0, 1, "", "ewm_std"], [154, 0, 1, "", "ewm_var"], [155, 0, 1, "", "exclude"], [156, 0, 1, "", "exp"], [157, 0, 1, "", "explode"], [158, 0, 1, "", "extend_constant"], [159, 0, 1, "", "fill_nan"], [160, 0, 1, "", "fill_null"], [161, 0, 1, "", "filter"], [162, 0, 1, "", "first"], [163, 0, 1, "", "flatten"], [164, 0, 1, "", "floor"], [165, 0, 1, "", "forward_fill"], [166, 0, 1, "", "hash"], [167, 0, 1, "", "head"], [168, 0, 1, "", "inspect"], [169, 0, 1, "", "interpolate"], [170, 0, 1, "", "is_between"], [171, 0, 1, "", "is_duplicated"], [172, 0, 1, "", "is_finite"], [173, 0, 1, "", "is_first"], [174, 0, 1, "", "is_in"], [175, 0, 1, "", "is_infinite"], [176, 0, 1, "", "is_nan"], [177, 0, 1, "", "is_not"], [178, 0, 1, "", "is_not_nan"], [179, 0, 1, "", "is_not_null"], [180, 0, 1, "", "is_null"], [181, 0, 1, "", "is_unique"], [182, 0, 1, "", "keep_name"], [183, 0, 1, "", "kurtosis"], [184, 0, 1, "", "last"], [185, 0, 1, "", "len"], [186, 0, 1, "", "limit"], [187, 0, 1, "", "list"], [188, 0, 1, "", "log"], [189, 0, 1, "", "log10"], [190, 0, 1, "", "lower_bound"], [191, 0, 1, "", "map"], [192, 0, 1, "", "map_alias"], [193, 0, 1, "", "max"], [194, 0, 1, "", "mean"], [195, 0, 1, "", "median"], [196, 0, 1, "", "min"], [197, 0, 1, "", "mode"], [198, 0, 1, "", "n_unique"], [199, 0, 1, "", "nan_max"], [200, 0, 1, "", "nan_min"], [201, 0, 1, "", "null_count"], [202, 0, 1, "", "over"], [203, 0, 1, "", "pct_change"], [204, 0, 1, "", "pow"], [205, 0, 1, "", "prefix"], [206, 0, 1, "", "product"], [207, 0, 1, "", "quantile"], [208, 0, 1, "", "rank"], [209, 0, 1, "", "rechunk"], [210, 0, 1, "", "reinterpret"], [211, 0, 1, "", "repeat_by"], [212, 0, 1, "", "reshape"], [213, 0, 1, "", "reverse"], [214, 0, 1, "", "rolling_apply"], [215, 0, 1, "", "rolling_max"], [216, 0, 1, "", "rolling_mean"], [217, 0, 1, "", "rolling_median"], [218, 0, 1, "", "rolling_min"], [219, 0, 1, "", "rolling_quantile"], [220, 0, 1, "", "rolling_skew"], [221, 0, 1, "", "rolling_std"], [222, 0, 1, "", "rolling_sum"], [223, 0, 1, "", "rolling_var"], [224, 0, 1, "", "round"], [225, 0, 1, "", "sample"], [226, 0, 1, "", "search_sorted"], [227, 0, 1, "", "set_sorted"], [228, 0, 1, "", "shift"], [229, 0, 1, "", "shift_and_fill"], [230, 0, 1, "", "shuffle"], [231, 0, 1, "", "sign"], [232, 0, 1, "", "sin"], [233, 0, 1, "", "sinh"], [234, 0, 1, "", "skew"], [235, 0, 1, "", "slice"], [236, 0, 1, "", "sort"], [237, 0, 1, "", "sort_by"], [238, 0, 1, "", "sqrt"], [239, 0, 1, "", "std"], [240, 2, 1, "", "str"], [241, 0, 1, "", "suffix"], [242, 0, 1, "", "sum"], [243, 0, 1, "", "tail"], [244, 0, 1, "", "take"], [245, 0, 1, "", "take_every"], [246, 0, 1, "", "tan"], [247, 0, 1, "", "tanh"], [248, 0, 1, "", "to_physical"], [249, 0, 1, "", "top_k"], [250, 0, 1, "", "unique"], [251, 0, 1, "", "unique_counts"], [252, 0, 1, "", "upper_bound"], [253, 0, 1, "", "value_counts"], [254, 0, 1, "", "var"], [255, 0, 1, "", "where"]], "polars.LazyFrame": [[256, 0, 1, "", "cache"], [257, 0, 1, "", "cleared"], [258, 0, 1, "", "clone"], [259, 0, 1, "", "collect"], [260, 2, 1, "", "columns"], [261, 0, 1, "", "describe_optimized_plan"], [262, 0, 1, "", "describe_plan"], [263, 0, 1, "", "drop"], [264, 0, 1, "", "drop_nulls"], [265, 2, 1, "", "dtypes"], [266, 0, 1, "", "explode"], [267, 0, 1, "", "fetch"], [268, 0, 1, "", "fill_nan"], [269, 0, 1, "", "fill_null"], [270, 0, 1, "", "filter"], [271, 0, 1, "", "first"], [272, 0, 1, "", "from_json"], [273, 0, 1, "", "groupby"], [274, 0, 1, "", "groupby_dynamic"], [275, 0, 1, "", "groupby_rolling"], [276, 0, 1, "", "head"], [277, 0, 1, "", "inspect"], [278, 0, 1, "", "interpolate"], [279, 0, 1, "", "join"], [280, 0, 1, "", "join_asof"], [281, 0, 1, "", "last"], [282, 0, 1, "", "limit"], [283, 0, 1, "", "map"], [284, 0, 1, "", "max"], [285, 0, 1, "", "mean"], [286, 0, 1, "", "median"], [287, 0, 1, "", "melt"], [288, 0, 1, "", "min"], [289, 0, 1, "", "pipe"], [290, 0, 1, "", "profile"], [291, 0, 1, "", "quantile"], [292, 0, 1, "", "read_json"], [293, 0, 1, "", "rename"], [294, 0, 1, "", "reverse"], [295, 2, 1, "", "schema"], [296, 0, 1, "", "select"], [297, 0, 1, "", "shift"], [298, 0, 1, "", "shift_and_fill"], [299, 0, 1, "", "show_graph"], [300, 0, 1, "", "slice"], [301, 0, 1, "", "sort"], [302, 0, 1, "", "std"], [303, 0, 1, "", "sum"], [304, 0, 1, "", "tail"], [305, 0, 1, "", "take_every"], [306, 0, 1, "", "unique"], [307, 0, 1, "", "unnest"], [308, 0, 1, "", "var"], [309, 0, 1, "", "with_column"], [310, 0, 1, "", "with_columns"], [311, 0, 1, "", "with_context"], [312, 0, 1, "", "with_row_count"], [313, 0, 1, "", "write_json"]], "polars.Series": [[314, 0, 1, "", "__init__"], [315, 0, 1, "", "abs"], [316, 0, 1, "", "alias"], [317, 0, 1, "", "all"], [318, 0, 1, "", "any"], [319, 0, 1, "", "append"], [320, 0, 1, "", "apply"], [321, 0, 1, "", "arccos"], [322, 0, 1, "", "arccosh"], [323, 0, 1, "", "arcsin"], [324, 0, 1, "", "arcsinh"], [325, 0, 1, "", "arctan"], [326, 0, 1, "", "arctanh"], [327, 0, 1, "", "arg_max"], [328, 0, 1, "", "arg_min"], [329, 0, 1, "", "arg_sort"], [330, 0, 1, "", "arg_true"], [331, 0, 1, "", "arg_unique"], [332, 0, 1, "", "argsort"], [333, 2, 1, "", "arr"], [334, 0, 1, "", "cast"], [335, 2, 1, "", "cat"], [336, 0, 1, "", "ceil"], [337, 0, 1, "", "chunk_lengths"], [338, 0, 1, "", "cleared"], [339, 0, 1, "", "clip"], [340, 0, 1, "", "clip_max"], [341, 0, 1, "", "clip_min"], [342, 0, 1, "", "clone"], [343, 0, 1, "", "cos"], [344, 0, 1, "", "cosh"], [345, 0, 1, "", "cummax"], [346, 0, 1, "", "cummin"], [347, 0, 1, "", "cumprod"], [348, 0, 1, "", "cumsum"], [349, 0, 1, "", "cumulative_eval"], [350, 0, 1, "", "describe"], [351, 0, 1, "", "diff"], [352, 0, 1, "", "dot"], [353, 0, 1, "", "drop_nans"], [354, 0, 1, "", "drop_nulls"], [355, 2, 1, "", "dt"], [356, 2, 1, "", "dtype"], [357, 0, 1, "", "entropy"], [358, 0, 1, "", "estimated_size"], [359, 0, 1, "", "ewm_mean"], [360, 0, 1, "", "ewm_std"], [361, 0, 1, "", "ewm_var"], [362, 0, 1, "", "exp"], [363, 0, 1, "", "explode"], [364, 0, 1, "", "extend_constant"], [365, 0, 1, "", "fill_nan"], [366, 0, 1, "", "fill_null"], [367, 0, 1, "", "filter"], [368, 2, 1, "", "flags"], [369, 0, 1, "", "floor"], [370, 0, 1, "", "has_validity"], [371, 0, 1, "", "hash"], [372, 0, 1, "", "head"], [373, 2, 1, "", "inner_dtype"], [374, 0, 1, "", "interpolate"], [375, 0, 1, "", "is_boolean"], [376, 0, 1, "", "is_datelike"], [377, 0, 1, "", "is_duplicated"], [378, 0, 1, "", "is_empty"], [379, 0, 1, "", "is_finite"], [380, 0, 1, "", "is_first"], [381, 0, 1, "", "is_float"], [382, 0, 1, "", "is_in"], [383, 0, 1, "", "is_infinite"], [384, 0, 1, "", "is_nan"], [385, 0, 1, "", "is_not_nan"], [386, 0, 1, "", "is_not_null"], [387, 0, 1, "", "is_null"], [388, 0, 1, "", "is_numeric"], [389, 0, 1, "", "is_unique"], [390, 0, 1, "", "is_utf8"], [391, 0, 1, "", "kurtosis"], [392, 0, 1, "", "len"], [393, 0, 1, "", "limit"], [394, 0, 1, "", "log"], [395, 0, 1, "", "log10"], [396, 0, 1, "", "max"], [397, 0, 1, "", "mean"], [398, 0, 1, "", "median"], [399, 0, 1, "", "min"], [400, 0, 1, "", "mode"], [401, 0, 1, "", "n_chunks"], [402, 0, 1, "", "n_unique"], [403, 2, 1, "", "name"], [404, 0, 1, "", "nan_max"], [405, 0, 1, "", "nan_min"], [406, 0, 1, "", "null_count"], [407, 0, 1, "", "pct_change"], [408, 0, 1, "", "peak_max"], [409, 0, 1, "", "peak_min"], [410, 0, 1, "", "product"], [411, 0, 1, "", "quantile"], [412, 0, 1, "", "rank"], [413, 0, 1, "", "rechunk"], [414, 0, 1, "", "reinterpret"], [415, 0, 1, "", "rename"], [416, 0, 1, "", "reshape"], [417, 0, 1, "", "reverse"], [418, 0, 1, "", "rolling_apply"], [419, 0, 1, "", "rolling_max"], [420, 0, 1, "", "rolling_mean"], [421, 0, 1, "", "rolling_median"], [422, 0, 1, "", "rolling_min"], [423, 0, 1, "", "rolling_quantile"], [424, 0, 1, "", "rolling_skew"], [425, 0, 1, "", "rolling_std"], [426, 0, 1, "", "rolling_sum"], [427, 0, 1, "", "rolling_var"], [428, 0, 1, "", "round"], [429, 0, 1, "", "sample"], [430, 0, 1, "", "search_sorted"], [431, 0, 1, "", "series_equal"], [432, 0, 1, "", "set"], [433, 0, 1, "", "set_at_idx"], [434, 0, 1, "", "set_sorted"], [435, 2, 1, "", "shape"], [436, 0, 1, "", "shift"], [437, 0, 1, "", "shift_and_fill"], [438, 0, 1, "", "shrink_to_fit"], [439, 0, 1, "", "shuffle"], [440, 0, 1, "", "sign"], [441, 0, 1, "", "sin"], [442, 0, 1, "", "sinh"], [443, 0, 1, "", "skew"], [444, 0, 1, "", "slice"], [445, 0, 1, "", "sort"], [446, 0, 1, "", "sqrt"], [447, 0, 1, "", "std"], [448, 2, 1, "", "str"], [449, 0, 1, "", "sum"], [450, 0, 1, "", "tail"], [451, 0, 1, "", "take"], [452, 0, 1, "", "take_every"], [453, 0, 1, "", "tan"], [454, 0, 1, "", "tanh"], [455, 2, 1, "", "time_unit"], [456, 0, 1, "", "to_arrow"], [457, 0, 1, "", "to_dummies"], [458, 0, 1, "", "to_frame"], [459, 0, 1, "", "to_list"], [460, 0, 1, "", "to_numpy"], [461, 0, 1, "", "to_pandas"], [462, 0, 1, "", "to_physical"], [463, 0, 1, "", "top_k"], [464, 0, 1, "", "unique"], [465, 0, 1, "", "unique_counts"], [466, 0, 1, "", "value_counts"], [467, 0, 1, "", "var"], [468, 0, 1, "", "view"], [469, 0, 1, "", "zip_with"]], "polars.StringCache": [[470, 0, 1, "", "__init__"]], "polars.datatypes": [[486, 1, 1, "", "Boolean"], [487, 1, 1, "", "Categorical"], [488, 1, 1, "", "DataType"], [489, 1, 1, "", "Date"], [490, 1, 1, "", "Datetime"], [491, 1, 1, "", "Duration"], [492, 1, 1, "", "Float32"], [493, 1, 1, "", "Float64"], [494, 1, 1, "", "Int16"], [495, 1, 1, "", "Int32"], [496, 1, 1, "", "Int64"], [497, 1, 1, "", "Int8"], [498, 1, 1, "", "List"], [499, 1, 1, "", "Null"], [500, 1, 1, "", "Object"], [501, 1, 1, "", "Struct"], [502, 1, 1, "", "Time"], [503, 1, 1, "", "UInt16"], [504, 1, 1, "", "UInt32"], [505, 1, 1, "", "UInt64"], [506, 1, 1, "", "UInt8"], [507, 1, 1, "", "Unknown"], [508, 1, 1, "", "Utf8"], [509, 3, 1, "", "get_idx_type"]], "polars.datatypes.Boolean": [[486, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[487, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[488, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[489, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[490, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[491, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[492, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[493, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[494, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[495, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[496, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[497, 0, 1, "", "__init__"]], "polars.datatypes.List": [[498, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[499, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[500, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[501, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[502, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[503, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[504, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[505, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[506, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[507, 0, 1, "", "__init__"]], "polars.datatypes.Utf8": [[508, 0, 1, "", "__init__"]], "polars.exceptions": [[515, 4, 1, "", "ArrowError"], [516, 4, 1, "", "ComputeError"], [517, 4, 1, "", "DuplicateError"], [518, 4, 1, "", "NoDataError"], [519, 4, 1, "", "NoRowsReturned"], [520, 4, 1, "", "NotFoundError"], [521, 4, 1, "", "PanicException"], [522, 4, 1, "", "RowsException"], [523, 4, 1, "", "SchemaError"], [524, 4, 1, "", "ShapeError"], [525, 4, 1, "", "TooManyRowsReturned"]], "polars.internals.dataframe.groupby.GroupBy": [[539, 0, 1, "", "agg"], [540, 0, 1, "", "agg_list"], [541, 0, 1, "", "apply"], [542, 0, 1, "", "count"], [543, 0, 1, "", "first"], [544, 0, 1, "", "head"], [545, 0, 1, "", "last"], [546, 0, 1, "", "max"], [547, 0, 1, "", "mean"], [548, 0, 1, "", "median"], [549, 0, 1, "", "min"], [550, 0, 1, "", "n_unique"], [551, 0, 1, "", "pivot"], [552, 0, 1, "", "quantile"], [553, 0, 1, "", "sum"], [554, 0, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[555, 0, 1, "", "count"], [556, 0, 1, "", "first"], [557, 0, 1, "", "last"], [558, 0, 1, "", "max"], [559, 0, 1, "", "mean"], [560, 0, 1, "", "median"], [561, 0, 1, "", "min"], [562, 0, 1, "", "sum"]], "polars.internals.expr.categorical.ExprCatNameSpace": [[563, 0, 1, "", "set_ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace": [[564, 0, 1, "", "cast_time_unit"], [565, 0, 1, "", "day"], [566, 0, 1, "", "days"], [567, 0, 1, "", "epoch"], [568, 0, 1, "", "hour"], [569, 0, 1, "", "hours"], [570, 0, 1, "", "iso_year"], [571, 0, 1, "", "milliseconds"], [572, 0, 1, "", "minute"], [573, 0, 1, "", "minutes"], [574, 0, 1, "", "month"], [575, 0, 1, "", "nanosecond"], [576, 0, 1, "", "nanoseconds"], [577, 0, 1, "", "offset_by"], [578, 0, 1, "", "ordinal_day"], [579, 0, 1, "", "quarter"], [580, 0, 1, "", "second"], [581, 0, 1, "", "seconds"], [582, 0, 1, "", "strftime"], [583, 0, 1, "", "timestamp"], [584, 0, 1, "", "truncate"], [585, 0, 1, "", "week"], [586, 0, 1, "", "weekday"], [587, 0, 1, "", "with_time_unit"], [588, 0, 1, "", "year"]], "polars.internals.expr.list.ExprListNameSpace": [[589, 0, 1, "", "arg_max"], [590, 0, 1, "", "arg_min"], [591, 0, 1, "", "concat"], [592, 0, 1, "", "contains"], [593, 0, 1, "", "diff"], [594, 0, 1, "", "eval"], [595, 0, 1, "", "first"], [596, 0, 1, "", "get"], [597, 0, 1, "", "head"], [598, 0, 1, "", "join"], [599, 0, 1, "", "last"], [600, 0, 1, "", "lengths"], [601, 0, 1, "", "max"], [602, 0, 1, "", "mean"], [603, 0, 1, "", "min"], [604, 0, 1, "", "reverse"], [605, 0, 1, "", "shift"], [606, 0, 1, "", "slice"], [607, 0, 1, "", "sort"], [608, 0, 1, "", "sum"], [609, 0, 1, "", "tail"], [610, 0, 1, "", "to_struct"], [611, 0, 1, "", "unique"]], "polars.internals.expr.meta.ExprMetaNameSpace": [[612, 0, 1, "", "output_name"], [613, 0, 1, "", "pop"], [614, 0, 1, "", "root_names"], [615, 0, 1, "", "undo_aliases"]], "polars.internals.expr.string.ExprStringNameSpace": [[616, 0, 1, "", "concat"], [617, 0, 1, "", "contains"], [618, 0, 1, "", "count_match"], [619, 0, 1, "", "decode"], [620, 0, 1, "", "encode"], [621, 0, 1, "", "ends_with"], [622, 0, 1, "", "extract"], [623, 0, 1, "", "extract_all"], [624, 0, 1, "", "json_path_match"], [625, 0, 1, "", "lengths"], [626, 0, 1, "", "ljust"], [627, 0, 1, "", "lstrip"], [628, 0, 1, "", "replace"], [629, 0, 1, "", "replace_all"], [630, 0, 1, "", "rjust"], [631, 0, 1, "", "rstrip"], [632, 0, 1, "", "slice"], [633, 0, 1, "", "split"], [634, 0, 1, "", "split_exact"], [635, 0, 1, "", "splitn"], [636, 0, 1, "", "starts_with"], [637, 0, 1, "", "strip"], [638, 0, 1, "", "strptime"], [639, 0, 1, "", "to_lowercase"], [640, 0, 1, "", "to_uppercase"], [641, 0, 1, "", "zfill"]], "polars.internals.expr.struct.ExprStructNameSpace": [[642, 0, 1, "", "field"], [643, 0, 1, "", "rename_fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[644, 0, 1, "", "agg"], [645, 0, 1, "", "apply"], [646, 0, 1, "", "head"], [647, 0, 1, "", "tail"]], "polars.internals.series.categorical.CatNameSpace": [[648, 0, 1, "", "set_ordering"]], "polars.internals.series.datetime.DateTimeNameSpace": [[649, 0, 1, "", "cast_time_unit"], [650, 0, 1, "", "day"], [651, 0, 1, "", "days"], [652, 0, 1, "", "epoch"], [653, 0, 1, "", "hour"], [654, 0, 1, "", "hours"], [655, 0, 1, "", "iso_year"], [656, 0, 1, "", "max"], [657, 0, 1, "", "mean"], [658, 0, 1, "", "median"], [659, 0, 1, "", "milliseconds"], [660, 0, 1, "", "min"], [661, 0, 1, "", "minute"], [662, 0, 1, "", "minutes"], [663, 0, 1, "", "month"], [664, 0, 1, "", "nanosecond"], [665, 0, 1, "", "nanoseconds"], [666, 0, 1, "", "offset_by"], [667, 0, 1, "", "ordinal_day"], [668, 0, 1, "", "quarter"], [669, 0, 1, "", "second"], [670, 0, 1, "", "seconds"], [671, 0, 1, "", "strftime"], [672, 0, 1, "", "timestamp"], [673, 0, 1, "", "truncate"], [674, 0, 1, "", "week"], [675, 0, 1, "", "weekday"], [676, 0, 1, "", "with_time_unit"], [677, 0, 1, "", "year"]], "polars.internals.series.list.ListNameSpace": [[678, 0, 1, "", "arg_max"], [679, 0, 1, "", "arg_min"], [680, 0, 1, "", "concat"], [681, 0, 1, "", "contains"], [682, 0, 1, "", "diff"], [683, 0, 1, "", "eval"], [684, 0, 1, "", "first"], [685, 0, 1, "", "get"], [686, 0, 1, "", "head"], [687, 0, 1, "", "join"], [688, 0, 1, "", "last"], [689, 0, 1, "", "lengths"], [690, 0, 1, "", "max"], [691, 0, 1, "", "mean"], [692, 0, 1, "", "min"], [693, 0, 1, "", "reverse"], [694, 0, 1, "", "shift"], [695, 0, 1, "", "slice"], [696, 0, 1, "", "sort"], [697, 0, 1, "", "sum"], [698, 0, 1, "", "tail"], [699, 0, 1, "", "unique"]], "polars.internals.series.string.StringNameSpace": [[700, 0, 1, "", "concat"], [701, 0, 1, "", "contains"], [702, 0, 1, "", "count_match"], [703, 0, 1, "", "decode"], [704, 0, 1, "", "encode"], [705, 0, 1, "", "ends_with"], [706, 0, 1, "", "extract"], [707, 0, 1, "", "extract_all"], [708, 0, 1, "", "json_path_match"], [709, 0, 1, "", "lengths"], [710, 0, 1, "", "ljust"], [711, 0, 1, "", "lstrip"], [712, 0, 1, "", "replace"], [713, 0, 1, "", "replace_all"], [714, 0, 1, "", "rjust"], [715, 0, 1, "", "rstrip"], [716, 0, 1, "", "slice"], [717, 0, 1, "", "split"], [718, 0, 1, "", "split_exact"], [719, 0, 1, "", "splitn"], [720, 0, 1, "", "starts_with"], [721, 0, 1, "", "strip"], [722, 0, 1, "", "strptime"], [723, 0, 1, "", "to_lowercase"], [724, 0, 1, "", "to_uppercase"], [725, 0, 1, "", "zfill"]], "polars.internals.series.struct.StructNameSpace": [[726, 0, 1, "", "field"], [727, 2, 1, "", "fields"], [728, 0, 1, "", "rename_fields"], [729, 0, 1, "", "to_frame"]], "polars.testing": [[763, 3, 1, "", "assert_frame_equal"], [764, 3, 1, "", "assert_series_equal"], [765, 1, 1, "", "column"], [766, 3, 1, "", "columns"], [767, 3, 1, "", "dataframes"], [768, 3, 1, "", "series"]], "polars.testing.column": [[765, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 773, 778], "set_ascii_t": 1, "set_fmt_str_length": 2, "set_global_string_cach": 3, "set_tbl_cell_align": 4, "set_tbl_change_column_data_type_position_format": 5, "set_tbl_col": 6, "set_tbl_format": 7, "set_tbl_hide_column_data_typ": 8, "set_tbl_hide_column_nam": 9, "set_tbl_hide_column_separ": 10, "set_tbl_hide_dataframe_shap": 11, "set_tbl_row": 12, "set_tbl_width_char": 13, "set_utf8_t": 14, "unset_global_string_cach": 15, "datafram": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 767, 774], "appli": [17, 117, 320, 473, 541, 645, 774, 777, 781], "clear": [18, 257, 338], "clone": [19, 258, 342], "column": [20, 260, 765, 766, 777], "describ": [21, 350], "drop": [22, 263], "drop_in_plac": 23, "drop_nul": [24, 149, 264, 354], "dtype": [25, 265, 356], "estimated_s": [26, 358], "explod": [27, 157, 266, 363], "extend": 28, "fill_nan": [29, 159, 268, 365], "fill_nul": [30, 160, 269, 366], "filter": [31, 161, 270, 367], "find_idx_by_nam": 32, "fold": [33, 528], "frame_equ": 34, "get_column": [35, 36], "groupbi": [37, 273, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 644, 645, 646, 647, 774, 781], "groupby_dynam": [38, 274], "groupby_rol": [39, 275], "hash_row": 40, "head": [41, 167, 276, 372, 538, 544, 597, 646, 686], "height": 42, "hstack": 43, "insert_at_idx": 44, "interpol": [45, 169, 278, 374], "is_dupl": [46, 171, 377], "is_empti": [47, 378], "is_uniqu": [48, 181, 389], "join": [49, 279, 598, 687], "join_asof": [50, 280], "lazi": [51, 778], "limit": [52, 186, 282, 393], "max": [53, 193, 284, 396, 546, 558, 601, 656, 690, 733], "mean": [54, 194, 285, 397, 547, 559, 602, 657, 691, 734], "median": [55, 195, 286, 398, 548, 560, 658, 735], "melt": [56, 287], "min": [57, 196, 288, 399, 549, 561, 603, 660, 692, 736], "n_chunk": [58, 401], "null_count": [59, 201, 406], "partition_bi": 60, "pipe": [61, 289], "pivot": [62, 551, 555, 556, 557, 558, 559, 560, 561, 562, 774], "product": [63, 206, 410], "quantil": [64, 207, 291, 411, 552, 739], "rechunk": [65, 209, 413], "renam": [66, 293, 415], "replac": [67, 628, 712], "replace_at_idx": 68, "revers": [69, 213, 294, 417, 604, 693], "row": [70, 71], "sampl": [72, 225, 429], "schema": [73, 295], "select": [74, 296, 756, 774, 777, 781, 782], "shape": [75, 435], "shift": [76, 228, 297, 436, 605, 694], "shift_and_fil": [77, 229, 298, 437], "shrink_to_fit": [78, 438], "slice": [79, 235, 300, 444, 606, 632, 695, 716], "sort": [80, 236, 301, 445, 607, 696], "std": [81, 239, 302, 447, 759], "sum": [82, 242, 303, 449, 553, 562, 608, 697, 761], "tail": [83, 243, 304, 450, 554, 609, 647, 698, 762], "take_everi": [84, 245, 305, 452], "to_arrow": [85, 456], "to_dict": [86, 87], "to_dummi": [88, 457], "to_numpi": [89, 460], "to_panda": [90, 461], "to_seri": 91, "to_struct": [92, 610], "transpos": 93, "uniqu": [94, 250, 306, 464, 611, 699], "unnest": [95, 307], "unstack": 96, "upsampl": 97, "var": [98, 254, 308, 467, 771], "vstack": 99, "width": 100, "with_column": [101, 102, 309, 310], "with_row_count": [103, 312], "write_avro": 104, "write_csv": 105, "write_ipc": 106, "write_json": [107, 313], "write_ndjson": 108, "write_parquet": 109, "expr": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643], "ab": [111, 315], "agg_group": 112, "alia": [113, 316], "all": [114, 317, 471], "ani": [115, 318, 472], "append": [116, 319], "arcco": [118, 321], "arccosh": [119, 322], "arcsin": [120, 323], "arcsinh": [121, 324], "arctan": [122, 325], "arctanh": [123, 326], "arg_max": [124, 327, 589, 678], "arg_min": [125, 328, 590, 679], "arg_sort": [126, 329], "arg_uniqu": [127, 331], "argsort": [128, 332], "arr": [129, 333], "backward_fil": 130, "cast": [131, 334], "cat": [132, 335], "ceil": [133, 336], "clip": [134, 339], "clip_max": [135, 340], "clip_min": [136, 341], "co": [137, 343], "cosh": [138, 344], "count": [139, 483, 542, 555], "cumcount": 140, "cummax": [141, 345], "cummin": [142, 346], "cumprod": [143, 347], "cumsum": [144, 348], "cumulative_ev": [145, 349], "diff": [146, 351, 593, 682], "dot": [147, 352], "drop_nan": [148, 353], "dt": [150, 355], "entropi": [151, 357], "ewm_mean": [152, 359], "ewm_std": [153, 360], "ewm_var": [154, 361], "exclud": [155, 526], "exp": [156, 362], "extend_const": [158, 364], "first": [162, 271, 527, 543, 556, 595, 684], "flatten": 163, "floor": [164, 369], "forward_fil": 165, "hash": [166, 371], "inspect": [168, 277], "is_between": 170, "is_finit": [172, 379], "is_first": [173, 380], "is_in": [174, 382], "is_infinit": [175, 383], "is_nan": [176, 384], "is_not": 177, "is_not_nan": [178, 385], "is_not_nul": [179, 386], "is_nul": [180, 387], "keep_nam": 182, "kurtosi": [183, 391], "last": [184, 281, 545, 557, 599, 688], "len": [185, 392], "list": [187, 498, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 730, 777, 782], "log": [188, 394], "log10": [189, 395], "lower_bound": 190, "map": [191, 283, 732], "map_alia": 192, "mode": [197, 400], "n_uniqu": [198, 402, 550, 737], "nan_max": [199, 404], "nan_min": [200, 405], "over": 202, "pct_chang": [203, 407], "pow": 204, "prefix": 205, "rank": [208, 412], "reinterpret": [210, 414], "repeat_bi": 211, "reshap": [212, 416], "rolling_appli": [214, 418], "rolling_max": [215, 419], "rolling_mean": [216, 420], "rolling_median": [217, 421], "rolling_min": [218, 422], "rolling_quantil": [219, 423], "rolling_skew": [220, 424], "rolling_std": [221, 425], "rolling_sum": [222, 426], "rolling_var": [223, 427], "round": [224, 428], "search_sort": [226, 430], "set_sort": [227, 434], "shuffl": [230, 439], "sign": [231, 440], "sin": [232, 441], "sinh": [233, 442], "skew": [234, 443], "sort_bi": 237, "sqrt": [238, 446], "str": [240, 448], "suffix": 241, "take": [244, 451], "tan": [246, 453], "tanh": [247, 454], "to_phys": [248, 462], "top_k": [249, 463], "unique_count": [251, 465], "upper_bound": 252, "value_count": [253, 466], "where": 255, "lazyfram": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 644, 645, 646, 647, 781], "cach": 256, "collect": 259, "describe_optimized_plan": 261, "describe_plan": 262, "fetch": 267, "from_json": 272, "profil": 290, "read_json": [292, 745], "show_graph": 299, "with_context": 311, "seri": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 768, 782], "arg_tru": 330, "chunk_length": 337, "flag": 368, "has_valid": 370, "inner_dtyp": 373, "is_boolean": 375, "is_datelik": 376, "is_float": 381, "is_numer": 388, "is_utf8": 390, "name": [403, 777], "peak_max": 408, "peak_min": 409, "series_equ": 431, "set": 432, "set_at_idx": 433, "time_unit": 455, "to_fram": [458, 729], "to_list": 459, "view": 468, "zip_with": 469, "stringcach": 470, "arang": 474, "arg_wher": 475, "argsort_bi": 476, "avg": 477, "col": 478, "collect_al": 479, "concat": [480, 591, 616, 680, 700], "concat_list": 481, "concat_str": 482, "cov": 484, "cut": 485, "datatyp": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509], "boolean": [486, 777, 782], "categor": [487, 563, 648], "date": [489, 510, 775], "datetim": [490, 512, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "durat": [491, 513], "float32": 492, "float64": 493, "int16": 494, "int32": 495, "int64": 496, "int8": 497, "null": 499, "object": 500, "struct": [501, 642, 643, 726, 727, 728, 729, 760, 777, 782], "time": [502, 775], "uint16": 503, "uint32": 504, "uint64": 505, "uint8": 506, "unknown": 507, "utf8": 508, "get_idx_typ": 509, "date_rang": 511, "element": 514, "except": [515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 776], "arrowerror": 515, "computeerror": 516, "duplicateerror": 517, "nodataerror": 518, "norowsreturn": 519, "notfounderror": 520, "panicexcept": 521, "rowsexcept": 522, "schemaerror": 523, "shapeerror": 524, "toomanyrowsreturn": 525, "format": 529, "from_arrow": 530, "from_dict": [531, 532], "from_numpi": 533, "from_panda": 534, "from_record": 535, "get_dummi": 536, "group": 537, "intern": [539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729], "agg": [539, 644], "agg_list": 540, "pivotop": [555, 556, 557, 558, 559, 560, 561, 562], "exprcatnamespac": 563, "set_ord": [563, 648], "exprdatetimenamespac": [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "cast_time_unit": [564, 649], "dai": [565, 566, 650, 651], "epoch": [567, 652], "hour": [568, 569, 653, 654], "iso_year": [570, 655], "millisecond": [571, 659], "minut": [572, 573, 661, 662], "month": [574, 663], "nanosecond": [575, 576, 664, 665], "offset_bi": [577, 666], "ordinal_dai": [578, 667], "quarter": [579, 668], "second": [580, 581, 669, 670], "strftime": [582, 671], "timestamp": [583, 672], "truncat": [584, 673], "week": [585, 674], "weekdai": [586, 675], "with_time_unit": [587, 676], "year": [588, 677], "exprlistnamespac": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "contain": [592, 617, 681, 701], "eval": [594, 683], "get": [596, 685], "length": [600, 625, 689, 709], "meta": [612, 613, 614, 615, 777], "exprmetanamespac": [612, 613, 614, 615], "output_nam": 612, "pop": 613, "root_nam": 614, "undo_alias": 615, "string": [616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 777, 782], "exprstringnamespac": [616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641], "count_match": [618, 702], "decod": [619, 703], "encod": [620, 704], "ends_with": [621, 705], "extract": [622, 706], "extract_al": [623, 707], "json_path_match": [624, 708], "ljust": [626, 710], "lstrip": [627, 711], "replace_al": [629, 713], "rjust": [630, 714], "rstrip": [631, 715], "split": [633, 717], "split_exact": [634, 718], "splitn": [635, 719], "starts_with": [636, 720], "strip": [637, 721], "strptime": [638, 722], "to_lowercas": [639, 723], "to_uppercas": [640, 724], "zfill": [641, 725], "exprstructnamespac": [642, 643], "field": [642, 726, 727], "rename_field": [643, 728], "lazygroupbi": [644, 645, 646, 647], "catnamespac": 648, "datetimenamespac": [649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "listnamespac": [678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "stringnamespac": [700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725], "structnamespac": [726, 727, 728, 729], "lit": 731, "pearson_corr": 738, "read_avro": 740, "read_csv": 741, "read_excel": 742, "read_ipc": 743, "read_ipc_schema": 744, "read_ndjson": 746, "read_parquet": 747, "read_parquet_schema": 748, "read_sql": 749, "repeat": 750, "scan_csv": 751, "scan_d": 752, "scan_ipc": 753, "scan_ndjson": 754, "scan_parquet": 755, "show_vers": 757, "spearman_rank_corr": 758, "test": [763, 764, 765, 766, 767, 768, 783], "assert_frame_equ": 763, "assert_series_equ": 764, "threadpool_s": 769, "toggle_string_cach": 770, "when": 772, "constructor": [774, 777, 782], "attribut": [774, 777, 781, 782], "convers": [774, 778, 781, 782], "aggreg": [774, 777, 781, 782], "descript": [774, 781, 782], "stat": [774, 781, 782], "comput": [774, 777, 782], "manipul": [774, 777, 781, 782], "variou": [774, 777, 781, 782], "data": 775, "type": 775, "numer": 775, "nest": 775, "other": 775, "function": [775, 777, 778], "express": 777, "window": 777, "timeseri": [777, 782], "categori": [777, 782], "eager": 778, "parallel": 778, "api": 779, "refer": 779, "input": 780, "output": 780, "csv": 780, "feather": 780, "ipc": 780, "parquet": 780, "sql": 780, "json": 780, "avro": 780, "excel": 780, "dataset": 780, "assert": 783, "properti": 783, "base": 783, "strategi": 783, "helper": 783, "util": 784}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 56}})